[{"snippet": "i will just get the formatting correct", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 306.25, "title": "Open and Create a file"}, {"snippet": "and then I'm going to say \"okay, sscanf please read from this string array and what I'd like you to do is convert that into a string followed by one or more spaces and then an integer value\"", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 52.296875, "title": "Scanf Intro"}, {"snippet": "first of all, let's make it so that we can actually see the pointer in memory where array is pointing to", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 91.984375, "title": "Pointers To Automatic Variables"}, {"snippet": "so for example, this would be an error", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 312.640625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "instead I'll say len is strlen() and pass it a pointer to my character", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 225.203125, "title": "Character Pointers"}, {"snippet": "for example we could blank it out", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 155.796875, "title": "Char Array Searching"}, {"snippet": "if the contents of p is an 'o', let's return p", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 311.796875, "title": "Char Array Searching"}, {"snippet": "so that's my link destroy method", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 212.078125, "title": "Creating Links Strdup"}, {"snippet": "and even further, what is a byte?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 33.96875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "I get a segmentation fault when I try to run that line", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 310.078125, "title": "Character Pointers"}, {"snippet": "like 'J' turn it into Jello", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 289.671875, "title": "Character Pointers"}, {"snippet": "and if you compare two things, you'll learn that with an integer value of either 0 or 1 to mean for example if they are either the same or different", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 38.9375, "title": "Hello Std Err"}, {"snippet": "so let's have a look at a little program i have written so far that doesn't use signals yet", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 13.828125, "title": "SIGINT SIGALRM"}, {"snippet": "so the default behavior of this sigalrm is to actually stop our program", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 192.921875, "title": "SIGINT SIGALRM"}, {"snippet": "The standard output is inside output.txt", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 182.015625, "title": "Hello Std Err"}, {"snippet": "remember that the name of the array (when converted to address) gives us the very beginning of the array", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 107.859375, "title": "Pointers To Automatic Variables"}, {"snippet": "Okay welcome to systems programming", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 0, "title": "Hello World"}, {"snippet": "so let's write the code for that", "videoIndex": 17, "source": "0180-getline", "startTime": 266.265625, "title": "Getline"}, {"snippet": "which are not the 0 byte", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 120.0625, "title": "Character Pointers"}, {"snippet": "and then we can use that and copy that result into new memory, into our result", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 132.953125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "print out the result in our printf statement here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 174.515625, "title": "Scanf Intro"}, {"snippet": "and rather than printing out hello", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 272.671875, "title": "Get Put Char"}, {"snippet": "right and then we'll print it out", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 150.75, "title": "Get Put Char"}, {"snippet": "which is to be very wary of just how long they live for", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 83.078125, "title": "Pointers To Automatic Variables"}, {"snippet": "Change that and run it again", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 140.9375, "title": "Hello Std Err"}, {"snippet": "and then providing we get a non-null pointer back from malloc", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 8.828125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so this assures that i don't have any dangling pointers", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 186.703125, "title": "Creating Links Strdup"}, {"snippet": "okay so let's run that", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 242.625, "title": "Char Array Searching"}, {"snippet": "we will copy in the time 2:51 PM into that memory", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 12.96875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "but does take an integer", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 99.28125, "title": "SIGINT SIGALRM"}, {"snippet": "and quite often we don't actually need that", "videoIndex": 17, "source": "0180-getline", "startTime": 256.96875, "title": "Getline"}, {"snippet": "why do i do that", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 76.59375, "title": "Creating Links Strdup"}, {"snippet": "that write was not declared before", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 52.796875, "title": "Hello World"}, {"snippet": "we have an integer (the number of arguments here) and also an array of character pointers", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 50.515625, "title": "Program Arguments"}, {"snippet": "so in this case if I do ABCDABCDABCD I've already overflowed because the thirteenth byte is now going to be written into my integer", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 328.328125, "title": "Get Put Char"}, {"snippet": "so here's the result and we'll say %s %d and we'll print the contents of the buffer and print the value of score", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 133.71875, "title": "Scanf Intro"}, {"snippet": "so here's some functions defined in std.io", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 5.21875, "title": "Get Put Char"}, {"snippet": "well i can simply return the memory back", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 158.859375, "title": "Creating Links Strdup"}, {"snippet": "Hello! Let's talk about how we can use scanf and sscanf and fscanf to read some data and convert that into say integers or floats or strings", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 0, "title": "Scanf Intro"}, {"snippet": "here, our program is just called \"program\"", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 106.578125, "title": "Program Arguments"}, {"snippet": "followed by a colon followed by no such file or directories", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 425.5, "title": "Open Errors and Printf"}, {"snippet": "once we've freed it don't try to use the pointer again", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 309.671875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "both of these functions can be found inside the include time.h", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 55.078125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "how about we change all the 'l's to a different letter", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 91.4375, "title": "Char Array Searching"}, {"snippet": "and then there can be actually multiple spaces in our data", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 81.484375, "title": "Scanf Intro"}, {"snippet": "so that gives me back a pointer and I actually want to cast it so that it's type pointer to a link_t", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 213.640625, "title": "Struct Typedef LinkedList"}, {"snippet": "so in this case we need twelve bytes for that, eleven for \"hello world\" plus a twelfth to hold the null character at the end the bit pattern zero to say okay we've reached the end of the string", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 59.859375, "title": "Char Array Searching"}, {"snippet": "so for example, let's have a little bit of data here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 23.140625, "title": "Scanf Intro"}, {"snippet": "and you can see that the letter A corresponds to sixty five which is in hexadecimal forty one", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 94.34375, "title": "Get Put Char"}, {"snippet": "so, I'm going to look up now the flags I need to open and create a new file", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 116, "title": "Open and Create a file"}, {"snippet": "let's have a look at those now", "videoIndex": 8, "source": "0090-Environment", "startTime": 12.6875, "title": "Environment"}, {"snippet": "when we start, argc is just 1. we've got just the program", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 189.8125, "title": "Program Arguments"}, {"snippet": "so now we can actually print out the value of our file descriptor", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 156.78125, "title": "Open Errors and Printf"}, {"snippet": "of negative forty two", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 256.125, "title": "Scanf Intro"}, {"snippet": "we don't do it we let getline do it", "videoIndex": 17, "source": "0180-getline", "startTime": 348.96875, "title": "Getline"}, {"snippet": "that's five bytes we're going to send", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 40.296875, "title": "Hello World"}, {"snippet": "so we will find signals to be very useful when we start dealing working with more than one process", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 249.109375, "title": "SIGINT SIGALRM"}, {"snippet": "it takes a file descriptor which is going to be an integer", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 74.140625, "title": "Hello World"}, {"snippet": "and when i finished using that memory", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 238.015625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "instead, I've got a function called eg and that can say have its own space", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 186.921875, "title": "Pointers To Automatic Variables"}, {"snippet": "great so let's encrypt our file now so I'm going to modify our value of c if it's not a newline character", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 124.328125, "title": "Get Put Char"}, {"snippet": "so let us do that", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 240.296875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so, we can say struct Link and it's a pointer to that", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 32.546875, "title": "Struct Typedef LinkedList"}, {"snippet": "we can say \"printf my value is\"", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 46.84375, "title": "Open Errors and Printf"}, {"snippet": "so, something bad happened while calling open", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 394.65625, "title": "Open Errors and Printf"}, {"snippet": "so what we need to do is tell scanf just how big our buffer is", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 210.390625, "title": "Scanf Intro"}, {"snippet": "So, I could actually write this more tersely just by saying \"hey, count!\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 30.8125, "title": "Hello Std Err"}, {"snippet": "i'll get rid of that line now", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 213.796875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and when we run the program again this time you'll see that secret is a valid integer value so that's just an integer representation of the pointer", "videoIndex": 8, "source": "0090-Environment", "startTime": 318.015625, "title": "Environment"}, {"snippet": "so we will say look if the child id what i return from fork is actually greater than 0", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 176.171875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "I'm tempted to use pointer but that would be a bad idea", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 231.390625, "title": "Character Pointers"}, {"snippet": "so give me the address of my capacity", "videoIndex": 17, "source": "0180-getline", "startTime": 144.359375, "title": "Getline"}, {"snippet": "what we forgot to do, was to do the includes", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 289.421875, "title": "Open and Create a file"}, {"snippet": "it gave up trying to read the integer because our buffer wasn't long enough", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 248.328125, "title": "Scanf Intro"}, {"snippet": "and it's just a copy of that existing character array that we passed it", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 240.953125, "title": "Creating Links Strdup"}, {"snippet": "we are actually just going to add one to it", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 190.84375, "title": "Character Pointers"}, {"snippet": "so in other words i've now got a pointer called key and it's looking at exactly the same string array as the parameter is", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 104.53125, "title": "Creating Links Strdup"}, {"snippet": "and then return a pointer to the first byte of that memory so that's our little currenttime", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 17.5, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so what is nothankyou", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 86.453125, "title": "SIGINT SIGALRM"}, {"snippet": "so here's two surprising things", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 96.84375, "title": "Program Arguments"}, {"snippet": "and then we have a little loop that prints it out and sleeps for three seconds", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 24.640625, "title": "SIGINT SIGALRM"}, {"snippet": "C knows the type of that pointer", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 112.71875, "title": "Follow The Int Pointer"}, {"snippet": "okay so the c compiler here is warning us that we're trying to call a function called write which hasn't yet been declared", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 56.703125, "title": "Hello World"}, {"snippet": "alright so let's run this", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 89.25, "title": "Get Put Char"}, {"snippet": "so let's try this", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 22.921875, "title": "Hello World"}, {"snippet": "you create which uses a system call write", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 165.390625, "title": "Hello World"}, {"snippet": "that would be something important to do if your program ran for a very long time", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 343.171875, "title": "Struct Typedef LinkedList"}, {"snippet": "just for fun let me show you one called sigalarm", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 155.984375, "title": "SIGINT SIGALRM"}, {"snippet": "so what is that that is a little message of three bytes to send", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 114.25, "title": "SIGINT SIGALRM"}, {"snippet": "so lets store that inside a little variable", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 67.890625, "title": "Open and Create a file"}, {"snippet": "so now i can make my program check that the secret is set for example", "videoIndex": 8, "source": "0090-Environment", "startTime": 258.609375, "title": "Environment"}, {"snippet": "so, all future output is being sent to our file", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 289.15625, "title": "Open Errors and Printf"}, {"snippet": "so it's only going to call write() when that buffer is full", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 123.734375, "title": "Open Errors and Printf"}, {"snippet": "I've now got strlen()", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 220.390625, "title": "Character Pointers"}, {"snippet": "and now it's waiting for me to type something", "videoIndex": 17, "source": "0180-getline", "startTime": 240.546875, "title": "Getline"}, {"snippet": "that's right we see four worlds", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 350.546875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "what about if I wanted to store some value at the next entry?", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 149.859375, "title": "Follow The Int Pointer"}, {"snippet": "so for our string, we want it to write it into a buffer", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 102.328125, "title": "Scanf Intro"}, {"snippet": "and then i can write an if statement to decide if i am the parent or the newly created child or not", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 168.859375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "finally, let's put a new line in here", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 177.75, "title": "Program Arguments"}, {"snippet": "and, we won't close our own file descriptor until the very end of the program here", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 233.203125, "title": "Open Errors and Printf"}, {"snippet": "so we've got 9d40, 9d44, 9d48", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 102.09375, "title": "Follow The Int Pointer"}, {"snippet": "well i can say while i might be tempted to write pointer but that's not going to be particularly useful", "videoIndex": 8, "source": "0090-Environment", "startTime": 157.15625, "title": "Environment"}, {"snippet": "and oh ho ho", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 100.703125, "title": "Hello World"}, {"snippet": "so this avoids the problem of what is called a dangling pointer error", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 330.359375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "the size of the variable", "videoIndex": 17, "source": "0180-getline", "startTime": 142.359375, "title": "Getline"}, {"snippet": "or if I, oops, let me change that to put a one", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 251.25, "title": "Struct Typedef LinkedList"}, {"snippet": "but don't expect that to stay around because if you call ctime() again in the future it is going to overwrite those bytes", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 157.09375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so let's here some text my program.c and i'm going to pipe that into my program to use as its input", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 173.65625, "title": "Get Put Char"}, {"snippet": "here's one", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 88.796875, "title": "Struct Typedef LinkedList"}, {"snippet": "now it's time for you to play and learn a little bit about the basic C primitives. Bye!", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 314.625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so we can also say hey give me the environment variable and give it a name", "videoIndex": 8, "source": "0090-Environment", "startTime": 220.0625, "title": "Environment"}, {"snippet": "so i need to have a variable called status just a little integer", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 263.109375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "then it exited", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 304.078125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "then I can again set up the values. be very careful when copying and pasting code that you've actually edited it correctly", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 266.546875, "title": "Struct Typedef LinkedList"}, {"snippet": "when they are run?", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 43.75, "title": "Program Arguments"}, {"snippet": "if I attempt to run this, we're using printf(), we haven't declared it beforehand so we get a warning", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 77.625, "title": "Open Errors and Printf"}, {"snippet": "so we want the result and we want the buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 228.25, "title": "Getline"}, {"snippet": "and let's increment our count as well", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 105.796875, "title": "Character Pointers"}, {"snippet": "so now I want to print it out", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 60.71875, "title": "Get Put Char"}, {"snippet": "well, we've have a value to store and we'll need a pointer to the next link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 25.8125, "title": "Struct Typedef LinkedList"}, {"snippet": "so i can call my child", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 166.5, "title": "Fork Waitpid Forkbomb"}, {"snippet": "the easiest way to do that remember is strings are just terminated by zero", "videoIndex": 17, "source": "0180-getline", "startTime": 315.84375, "title": "Getline"}, {"snippet": "Now, rather than writing 1 and 2 over here, perhaps we should actually have some constants", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 195.90625, "title": "Hello Std Err"}, {"snippet": "well, one way is to use asterisk which means use the address so, for example, I can say data the parenthesis are not strictly necessary but we'll use them in a moment", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 132.15625, "title": "Follow The Int Pointer"}, {"snippet": "when I return from f1, then the variable goes out of scope", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 55.0625, "title": "Pointers To Automatic Variables"}, {"snippet": "f948 as opposed to fd50", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 229.046875, "title": "Pointers To Automatic Variables"}, {"snippet": "okay so this works we could do a little better than this", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 161.859375, "title": "Creating Links Strdup"}, {"snippet": "Let's go back up and find those flags, where are you? Here we go.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 192.6875, "title": "Open and Create a file"}, {"snippet": "so the getline knows that it can't reuse what it happens to be pointing to", "videoIndex": 17, "source": "0180-getline", "startTime": 188.453125, "title": "Getline"}, {"snippet": "so export secret to be 123456", "videoIndex": 8, "source": "0090-Environment", "startTime": 195.09375, "title": "Environment"}, {"snippet": "so if i was to add one to the pointer", "videoIndex": 8, "source": "0090-Environment", "startTime": 143.296875, "title": "Environment"}, {"snippet": "who is allowed to do what", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 58.859375, "title": "Open and Create a file"}, {"snippet": "And great, we've got Hello and dot Hello dot Hello", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 144.015625, "title": "Hello Std Err"}, {"snippet": "so this time instead of sigint i can say look for a certain signal called sigalrm", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 210.546875, "title": "SIGINT SIGALRM"}, {"snippet": "in fact we say look there is somewhere in there is already a variable declared called environ and we just need access to it", "videoIndex": 8, "source": "0090-Environment", "startTime": 62.046875, "title": "Environment"}, {"snippet": "for that, we'll use some heap memory", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 184.03125, "title": "Struct Typedef LinkedList"}, {"snippet": "Hello welcome", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 0, "title": "SIGINT SIGALRM"}, {"snippet": "that's typical on modern machines", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 192.359375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "as it arbitrarily starts to kill processes in an attempt to recover some memory and space in its process tables", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 456.21875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and lastly let's put a newline here", "videoIndex": 17, "source": "0180-getline", "startTime": 231.828125, "title": "Getline"}, {"snippet": "and you will see that yeah i have got two different processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 64.75, "title": "Fork Waitpid Forkbomb"}, {"snippet": "if you are working however with older standard and an older compiler we have to ask gcc to explicitly enable it", "videoIndex": 17, "source": "0180-getline", "startTime": 23.125, "title": "Getline"}, {"snippet": "you can get to it directly", "videoIndex": 8, "source": "0090-Environment", "startTime": 218.078125, "title": "Environment"}, {"snippet": "if it can't read it, it simply returns zero", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 237.484375, "title": "Program Arguments"}, {"snippet": "more about that later", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 140.015625, "title": "SIGINT SIGALRM"}, {"snippet": "so i've got some character pointer here", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 229.421875, "title": "Get Put Char"}, {"snippet": "so that's going to be argc", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 84.546875, "title": "Program Arguments"}, {"snippet": "but for other items we can use the & to find out where it is stored in memory", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 212.734375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "let's increment this to six", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 143.9375, "title": "Hello World"}, {"snippet": "so if i had the same kind of pointer ", "videoIndex": 8, "source": "0090-Environment", "startTime": 103.515625, "title": "Environment"}, {"snippet": "and today I'm going to actually define them before my main method", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 8.375, "title": "Pointers To Automatic Variables"}, {"snippet": "let's talk about how we can get single characters and print them out in c", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 1.015625, "title": "Get Put Char"}, {"snippet": "but then we called fork and now our single process is actually being cloned", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 36, "title": "Fork Waitpid Forkbomb"}, {"snippet": "for example, rather than returning nothing returning void, suppose we try to return a pointer to our array", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 307.140625, "title": "Pointers To Automatic Variables"}, {"snippet": "what happened to our standard output?", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 263.8125, "title": "Open Errors and Printf"}, {"snippet": "So this video is about how to have an argument", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 0, "title": "Program Arguments"}, {"snippet": "now we need to do the mode", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 167.0625, "title": "Open and Create a file"}, {"snippet": "and we'll print that out", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 182.109375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "okay great so it says i have got six characters", "videoIndex": 17, "source": "0180-getline", "startTime": 246.328125, "title": "Getline"}, {"snippet": "remember this next time you're trying to read 3d data and points and you want to say convert those ASCII numbers into actual floats and doubles", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 351.46875, "title": "Scanf Intro"}, {"snippet": "hopefully you can guess what my program should do", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 348.546875, "title": "Char Array Searching"}, {"snippet": "alright so we've read data from a string ", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 284.796875, "title": "Scanf Intro"}, {"snippet": "so if I compile that now my warnings should go away", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 283.71875, "title": "Char Array Searching"}, {"snippet": "so we'll change and we'll pass the beggining of the array", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 95.25, "title": "Char Array Searching"}, {"snippet": "when we want to print out the values, we don't actually want to just print out the address of score", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 147.1875, "title": "Scanf Intro"}, {"snippet": "which essentially means give me some bytes", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 114.53125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "in other words, I want to go from ASCII to an integer", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 226.0625, "title": "Program Arguments"}, {"snippet": "so I don't need to put in the additional declares in", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 12.5625, "title": "Pointers To Automatic Variables"}, {"snippet": "so I can have a link here called \"one\" for example", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 50.75, "title": "Struct Typedef LinkedList"}, {"snippet": "where we're going to pass in an integer for the flags and the mode type", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 111.328125, "title": "Open and Create a file"}, {"snippet": "let's start manipulating our string", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 83.96875, "title": "Char Array Searching"}, {"snippet": "you probably thought about interrupts on the hardware level", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 238.3125, "title": "SIGINT SIGALRM"}, {"snippet": "it actually returns back an id", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 111.3125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "okay so there we go our alarm went off after four seconds and this time we asynchronously ran our code that printed out no to standard out", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 225.71875, "title": "SIGINT SIGALRM"}, {"snippet": "but it's actually up to us when we finish using getline to free that buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 350.984375, "title": "Getline"}, {"snippet": "so let's have f1 here and f2...ok", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 15.890625, "title": "Pointers To Automatic Variables"}, {"snippet": "and, we'll do that for our second function too", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 114.140625, "title": "Pointers To Automatic Variables"}, {"snippet": "now suppose we discover that our strings we don't control the lifetime of these string arrays", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 214.578125, "title": "Creating Links Strdup"}, {"snippet": "so you'll be using open(), write(), and close(). Bye.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 351.328125, "title": "Open and Create a file"}, {"snippet": "no! guess what there's a function called strlen()", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 210.90625, "title": "Character Pointers"}, {"snippet": "and I can of course make that simpler by just saying \"if level\"", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 268.015625, "title": "Pointers To Automatic Variables"}, {"snippet": "so, malloc does not initialize the actual memory. it just simply reserves it for us", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 229.609375, "title": "Struct Typedef LinkedList"}, {"snippet": "we know that strings will continue until we reach the null byte at the end", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 366.421875, "title": "Char Array Searching"}, {"snippet": "and we'll see that our value is three", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 191.9375, "title": "Open Errors and Printf"}, {"snippet": "and we find out that my little virtual machine thinks it's Jan 1 2014", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 226.453125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so, don't forget the asterisk", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 38.328125, "title": "Struct Typedef LinkedList"}, {"snippet": "so in this case, we're pointing at integers", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 116.015625, "title": "Follow The Int Pointer"}, {"snippet": "prints it out and sleeps", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 430.53125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "ok so that's going to be count and argv at index of count", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 170.8125, "title": "Program Arguments"}, {"snippet": "just allocates it for us.", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 235.4375, "title": "Struct Typedef LinkedList"}, {"snippet": "and i will cast that return type as a pointer to my link object", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 69.609375, "title": "Creating Links Strdup"}, {"snippet": "it's not a valid pointer", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 169.9375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "if i wanted to print out hello with a new line", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 140.875, "title": "Hello World"}, {"snippet": "so here's my main method I've got two function calls f1 f2", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 3.21875, "title": "Pointers To Automatic Variables"}, {"snippet": "and we got back at that memory location the contents of that environment variable ABC", "videoIndex": 8, "source": "0090-Environment", "startTime": 330.4375, "title": "Environment"}, {"snippet": "but it runs and it runs it for forever because my loops runs forever", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 183.890625, "title": "Char Array Searching"}, {"snippet": "there is the opposite which is to get some input", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 241.34375, "title": "Get Put Char"}, {"snippet": "okay, now, our format specifiers say the kind of data that we want to interpret and also the number of bytes that should be written to when it is trying to parse its data", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 88.453125, "title": "Scanf Intro"}, {"snippet": "first of all, these two things are very different", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 2.609375, "title": "Char Array Searching"}, {"snippet": "so we'll say %d and we'll print out just here", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 119.28125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so we'll leave our program, so let's exit with a value", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 375.578125, "title": "Open Errors and Printf"}, {"snippet": "and here's a surprise", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 28.15625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and what do i need to do in here", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 157.203125, "title": "Creating Links Strdup"}, {"snippet": "so of course we can stop this program by pressing control c", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 38.984375, "title": "SIGINT SIGALRM"}, {"snippet": "we'll need to know where the next link is in memory", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 30.6875, "title": "Struct Typedef LinkedList"}, {"snippet": "here's why, different parts of my proccesses' memory are valid for reading or reading and writing", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 313.0625, "title": "Character Pointers"}, {"snippet": "so we can run this and we see i get the first environment variable", "videoIndex": 8, "source": "0090-Environment", "startTime": 134.78125, "title": "Environment"}, {"snippet": "so this is pretty exciting right", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 236.75, "title": "SIGINT SIGALRM"}, {"snippet": "if it is unable to give me one hundred and twenty eight bytes it would give me back an invalid pointer pointed to null or pointed to nothing", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 146.5625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and process 682 has a fork return value of 0", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 139.375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "alright, so, I'll start by using sscanf", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 15.234375, "title": "Scanf Intro"}, {"snippet": "fantastic but what happens if we enter more than twelve bytes", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 285.59375, "title": "Get Put Char"}, {"snippet": "so you'll often see this pattern inside systems programming where we take a systems call or a library call and we store the results inside a variable", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 36.59375, "title": "Get Put Char"}, {"snippet": "And, I don't see an output value, but I can find out what the last exit value was of the last process", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 275.34375, "title": "Hello Std Err"}, {"snippet": "instead, we've got some C standard library calls that we can call", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 32.421875, "title": "Open Errors and Printf"}, {"snippet": "let's get some memory from the heap because we want our link to last for a long time until we decide to destroy it", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 54.078125, "title": "Creating Links Strdup"}, {"snippet": "right so it's a little bit shorter to type than writing printf", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 233.8125, "title": "Get Put Char"}, {"snippet": "so we for example i could say look if secret is null then i'm not going to let this program run", "videoIndex": 8, "source": "0090-Environment", "startTime": 290.8125, "title": "Environment"}, {"snippet": "i'll do an example and then I'll let you play as well", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 7.90625, "title": "Hello World"}, {"snippet": "so CHAR_BITS", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 180.0625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "you'll see that it's actually a character pointer pointer", "videoIndex": 8, "source": "0090-Environment", "startTime": 84.546875, "title": "Environment"}, {"snippet": "so that can go away", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 184.078125, "title": "Pointers To Automatic Variables"}, {"snippet": "and the correct arguments are in order to create a file", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 77.21875, "title": "Open and Create a file"}, {"snippet": "so that's enough for now", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 310.203125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "we'll store that inside our little variable called secondsSince1970", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 91.625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so, lets read that and we'll print it out", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 129.453125, "title": "Scanf Intro"}, {"snippet": "that's because we haven't declared what the function signature of change() looks like", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 259.890625, "title": "Char Array Searching"}, {"snippet": "we could actually change that over here in the console before we start the program", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 152.625, "title": "Hello Std Err"}, {"snippet": "later on. I just wanted to show you that they really are stored in different places", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 239.3125, "title": "Pointers To Automatic Variables"}, {"snippet": "i've got a buffer overflow and I've corrupted the contents of another variable", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 356.265625, "title": "Get Put Char"}, {"snippet": "and here it is", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 16.15625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so for example, let's find out how big an integer is on this machine", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 212.859375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "we will print out our buffer value", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 275.4375, "title": "Get Put Char"}, {"snippet": "which is essentially an unsigned int or larger on some systems", "videoIndex": 17, "source": "0180-getline", "startTime": 93.21875, "title": "Getline"}, {"snippet": "CDE for example and it changed the C to a B", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 155.796875, "title": "Get Put Char"}, {"snippet": "if i wish to debug this I could have a printf in here saying hey creating link and I could have what the key and values are for example", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 39.921875, "title": "Creating Links Strdup"}, {"snippet": "and also remember that its important to read exactly how scanf uses these format specifiers because its not quite the same as printf", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 361.5, "title": "Scanf Intro"}, {"snippet": "So that's my little program. You see it's got a return value of zero. Which is a convention for being correct (no errors)", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 256.671875, "title": "Hello Std Err"}, {"snippet": "and, I get some implicit problem here that we're calling exit(). I need to find the right #include to call for that.", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 406.359375, "title": "Open Errors and Printf"}, {"snippet": "or you can say actuall I'm not going to give you anything and it will still give you back the time in its result", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 72.921875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "in other words, we've reached the end of the string", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 142.25, "title": "Char Array Searching"}, {"snippet": "but heres a linux manual page I found on the web for the open()", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 101.21875, "title": "Open and Create a file"}, {"snippet": "so let's get started", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 3.15625, "title": "Hello World"}, {"snippet": "yes we've got output.txt. great!", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 336.921875, "title": "Open and Create a file"}, {"snippet": "and I can show a little bit of this by having a either a recursive function or we can make another function call these", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 159.875, "title": "Pointers To Automatic Variables"}, {"snippet": "so, I can have something which takes an integer say I'll call it \"level\"", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 249.90625, "title": "Pointers To Automatic Variables"}, {"snippet": "so there's our program and it managed to print out exactly \"hello\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 196.234375, "title": "Character Pointers"}, {"snippet": "let's do that now", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 264.625, "title": "Char Array Searching"}, {"snippet": "so if I cat my source code I can see the contents of that", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 107.1875, "title": "Get Put Char"}, {"snippet": "one common defensive programming technique is once we free a pointer set that pointer to be NULL", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 319.203125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so that's great if you wanted to represent all the numbers between zero and 4 billion on this particular machine", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 292.890625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so how do we find out how many bits are actually in a character?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 164.796875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "right so how did i get that", "videoIndex": 17, "source": "0180-getline", "startTime": 134.921875, "title": "Getline"}, {"snippet": "so if i use that", "videoIndex": 8, "source": "0090-Environment", "startTime": 81.8125, "title": "Environment"}, {"snippet": "we didn't set that environmental variable yet", "videoIndex": 8, "source": "0090-Environment", "startTime": 288.8125, "title": "Environment"}, {"snippet": "okay technically it might call realloc but let's not worry about exactly which library call it calls", "videoIndex": 17, "source": "0180-getline", "startTime": 163.953125, "title": "Getline"}, {"snippet": "and the answer is that actually our main method can have two parameters here", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 45.1875, "title": "Program Arguments"}, {"snippet": "because it's being called from eg", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 231.484375, "title": "Pointers To Automatic Variables"}, {"snippet": "this is a neat way if you'd like to do logging", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 293.09375, "title": "Open Errors and Printf"}, {"snippet": "so before doing our includes with stdio we need to define _GNU_SOURCE", "videoIndex": 17, "source": "0180-getline", "startTime": 30.390625, "title": "Getline"}, {"snippet": "the components of my struct", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 80.296875, "title": "Creating Links Strdup"}, {"snippet": "that those pointers better be valid for the lifetime of the link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 118.9375, "title": "Creating Links Strdup"}, {"snippet": "let's try and change our first character to be someting else", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 283.453125, "title": "Character Pointers"}, {"snippet": "and thus getline was born", "videoIndex": 17, "source": "0180-getline", "startTime": 17.671875, "title": "Getline"}, {"snippet": "okay so that's enough introduction to scanf", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 348.5, "title": "Scanf Intro"}, {"snippet": "So, I don't actually need to define them here in my program.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 251.921875, "title": "Hello Std Err"}, {"snippet": "for starters we're not using pointer", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 251.203125, "title": "Char Array Searching"}, {"snippet": "so let's put something like hey i'm the grouchy parent", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 186.609375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "In C, there is no boolean type.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 21.875, "title": "Hello Std Err"}, {"snippet": "let's compile and run it", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 220.578125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so every three seconds it is going to print out my home directory", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 29.578125, "title": "SIGINT SIGALRM"}, {"snippet": "the first output stream identified by the number '1' is the regular output, standard output", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 85.5625, "title": "Hello Std Err"}, {"snippet": "we need to pass in seconds since midnight", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 176.46875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "our character, then, is at least 8 bits", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 125.765625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "and which parts of memory are invalid", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 340.1875, "title": "Character Pointers"}, {"snippet": "to write a little message on the two lines", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 169.125, "title": "Hello World"}, {"snippet": "in fact, if we check the man page of open(), it's always a good idea to check the section called \"return value\"", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 345.671875, "title": "Open Errors and Printf"}, {"snippet": "why? because i happen to know that this array has one extra entry at the end which is the null entry", "videoIndex": 8, "source": "0090-Environment", "startTime": 173.34375, "title": "Environment"}, {"snippet": "right so why don't we use our little program to print out the contents of another file", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 100.390625, "title": "Get Put Char"}, {"snippet": "okay so we'll run our little program here", "videoIndex": 17, "source": "0180-getline", "startTime": 234.5, "title": "Getline"}, {"snippet": "and then each of those processes call fork", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 427.828125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "let's have a pointer to a character", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 71.46875, "title": "Character Pointers"}, {"snippet": "okay so let's make some methods to create links and destroy them", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 13.671875, "title": "Creating Links Strdup"}, {"snippet": "so uh here's a little virtual machine", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 11.359375, "title": "Hello World"}, {"snippet": "Let me cat that file", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 188.34375, "title": "Hello Std Err"}, {"snippet": "so let me pull up my favorite manpage on getline", "videoIndex": 17, "source": "0180-getline", "startTime": 81.28125, "title": "Getline"}, {"snippet": "and my program calls currenttime creates some memory and then returns it", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 204.65625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "well at the beginning there was a single process", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 34.140625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "let's xor it with one", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 148.078125, "title": "Get Put Char"}, {"snippet": "so now let's have a look in the case that I'm not using f2 anymore", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 178.375, "title": "Pointers To Automatic Variables"}, {"snippet": "it takes a pointer to a character", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 76.6875, "title": "Hello World"}, {"snippet": "you might also notice that the sleep also immediately returns", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 136.203125, "title": "SIGINT SIGALRM"}, {"snippet": "just by the keyword static", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 42.578125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and for open we need to say whether we want to append to an existing file, create a brand new file, and we need to give it a filename", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 8.3125, "title": "Open and Create a file"}, {"snippet": "h e l l o that's five, plus an extra byte for the 0 to say that's the end", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 52.03125, "title": "Character Pointers"}, {"snippet": "so it can't be overwritten", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 173.71875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so for example, I can set it to NULL", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 249.546875, "title": "Struct Typedef LinkedList"}, {"snippet": "but with great opportunity comes great responsibility here ", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 217.296875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "but this time our file descriptor is negative one", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 338.953125, "title": "Open Errors and Printf"}, {"snippet": "just to prove that they're making different arrays", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 120.328125, "title": "Pointers To Automatic Variables"}, {"snippet": "we need a pointer to \"one\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 167.78125, "title": "Struct Typedef LinkedList"}, {"snippet": "and then after that, it's going to treat the rest of the string as an integer", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 83.9375, "title": "Scanf Intro"}, {"snippet": "and, let me write my main method here", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 99.4375, "title": "Struct Typedef LinkedList"}, {"snippet": "and, it's going to first of all look for a string until it comes across one space", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 75.875, "title": "Scanf Intro"}, {"snippet": "so that's where kind of root's files will be stored", "videoIndex": 8, "source": "0090-Environment", "startTime": 40.359375, "title": "Environment"}, {"snippet": "okay that's enough for me now it's time for you to play", "videoIndex": 8, "source": "0090-Environment", "startTime": 337.796875, "title": "Environment"}, {"snippet": "so if we do that we would like the gnu source additions to the standard functions", "videoIndex": 17, "source": "0180-getline", "startTime": 39.40625, "title": "Getline"}, {"snippet": "alright, that's it for me. time for you to play. bye for now", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 371.28125, "title": "Scanf Intro"}, {"snippet": "ok so, hundred, hundred one", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 155.875, "title": "Follow The Int Pointer"}, {"snippet": "so, blah and maybe say a thousand and twenty four bytes here", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 192.65625, "title": "Pointers To Automatic Variables"}, {"snippet": "Now let's talk about pointers and arrays", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 0, "title": "Follow The Int Pointer"}, {"snippet": "let us have a very simple program that says hello world", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 12.75, "title": "Fork Waitpid Forkbomb"}, {"snippet": "we want to follow the pointer we want to dereference the pointer and for that we need the asterisk", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 144.5, "title": "Char Array Searching"}, {"snippet": "so i will call it say nothankyou", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 82.875, "title": "SIGINT SIGALRM"}, {"snippet": "and i will call this say capacity", "videoIndex": 17, "source": "0180-getline", "startTime": 113.265625, "title": "Getline"}, {"snippet": "our little loop went around five times and all it did was increment count", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 140.578125, "title": "Character Pointers"}, {"snippet": "and we also can used echo to print out the result of the exit value of the last program run", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 30.875, "title": "Program Arguments"}, {"snippet": "so we need to look at result minus one", "videoIndex": 17, "source": "0180-getline", "startTime": 304.140625, "title": "Getline"}, {"snippet": "so let's print out my id", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 394.25, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so let's try compiling this", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 44.046875, "title": "Hello World"}, {"snippet": "so we can represent negative numbers and plus numbers", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 272.140625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "this block of memory of one hundred and twenty eight bytes is no longer being used", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 244.65625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and now we need to give it a filestream so why don't we use say stdin", "videoIndex": 17, "source": "0180-getline", "startTime": 173.40625, "title": "Getline"}, {"snippet": "so let me check the two results", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 221.859375, "title": "Character Pointers"}, {"snippet": "so we could also write this in this slightly crazy way", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 223, "title": "Follow The Int Pointer"}, {"snippet": "so that gets rid of the problem of having some space", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 57.171875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so, we're going to print out \"hello world\" 5 times", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 46.734375, "title": "Hello Std Err"}, {"snippet": "i can say give me a single character for example and why don't I just keep calling this", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 8.875, "title": "Get Put Char"}, {"snippet": "and now we see here's the kernel printing out all sorts of debug messages", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 449.3125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and you can think of fork as saying let us clone this original process right here right now", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 79.421875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "the character type can actually be signed or unsigned", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 298.46875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "it quits the program", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 197.625, "title": "SIGINT SIGALRM"}, {"snippet": "let's print out my process id", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 409.265625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and in fact we are going to pass not just the value of status but the address of our little variable", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 267.8125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so lets go and look that up", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 81.953125, "title": "Open and Create a file"}, {"snippet": "so let me use a function called strcpy to put in the current time which is two fifty one pm", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 181.796875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "we'll do the create one first", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 20.578125, "title": "Creating Links Strdup"}, {"snippet": "so my terminal window", "videoIndex": 8, "source": "0090-Environment", "startTime": 16.703125, "title": "Environment"}, {"snippet": "I'm the grouchy parent", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 289.953125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "from small embedded machines to large mainframes", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 8.5, "title": "Not All Bytes Are 8Bits"}, {"snippet": "and we see that on this particular machine, that an integer can represent numbers from roughly minus 2 billion to plus 2 billion", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 77.078125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so let us run this now and what we will expect to see is that we'll wait for the child to finish before we print", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 281.8125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and remember when we call gets with buffer if you use the array name you are talking about the very first byte of the array", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 265.890625, "title": "Get Put Char"}, {"snippet": "so we'll say instead of having to write struct Link, I'll call this my link type", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 78.515625, "title": "Struct Typedef LinkedList"}, {"snippet": "Okay so let's talk about how we can make it easier to create links and destroy them", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 0, "title": "Creating Links Strdup"}, {"snippet": "now it maybe that our process doesn't like being interrupted", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 52.1875, "title": "SIGINT SIGALRM"}, {"snippet": "how do we do that", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 92.21875, "title": "SIGINT SIGALRM"}, {"snippet": "if we do that then when I destroy the link I better free up the memory associated with my key and value", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 250.265625, "title": "Creating Links Strdup"}, {"snippet": "and i can write a little c file here", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 15.609375, "title": "Hello World"}, {"snippet": "for example, I can say typedef number", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 67.078125, "title": "Struct Typedef LinkedList"}, {"snippet": "please put it back into the heap and maybe we will reuse that memory again for a future malloc", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 249.203125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so this video is a little introduction to signals", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 2.140625, "title": "SIGINT SIGALRM"}, {"snippet": "so, let's print that out inside our function here", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 102.5, "title": "Pointers To Automatic Variables"}, {"snippet": "Let's write this as a variable.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 168.796875, "title": "Open and Create a file"}, {"snippet": "so i could say look if result is zero or null or if i wanted to be really terse I could say if not result", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 152.546875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "well there's two ways", "videoIndex": 8, "source": "0090-Environment", "startTime": 48.390625, "title": "Environment"}, {"snippet": "so the bit pattern we pass to printf() will be treated as an integer", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 62.015625, "title": "Open Errors and Printf"}, {"snippet": "and in fact, they're initialized", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 110.765625, "title": "Struct Typedef LinkedList"}, {"snippet": "so to say that I've got to the end of the file when I'm just typing you by the way you can do control d", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 164.21875, "title": "Get Put Char"}, {"snippet": "and, a better program would actually check the return values of our different calls", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 310.890625, "title": "Open Errors and Printf"}, {"snippet": "and I can say \"%d\"", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 52.921875, "title": "Open Errors and Printf"}, {"snippet": "the value will be zero the number of bytes can be the size of my link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 182.3125, "title": "Creating Links Strdup"}, {"snippet": "and we just want to be able to reference it inside our program", "videoIndex": 8, "source": "0090-Environment", "startTime": 77.828125, "title": "Environment"}, {"snippet": "i am going to say at the beginning of my program that if you get a certain signal say sigint ", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 62.828125, "title": "SIGINT SIGALRM"}, {"snippet": "To prove it, let me have a look at that file.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 185.109375, "title": "Hello Std Err"}, {"snippet": "it is the same memory", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 90.515625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "I could have a pointer to \"hello world\"", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 5.3125, "title": "Char Array Searching"}, {"snippet": "so let's dereference that pointer and use it to push in a character", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 294.125, "title": "Character Pointers"}, {"snippet": "i could print out the very first one", "videoIndex": 8, "source": "0090-Environment", "startTime": 112.84375, "title": "Environment"}, {"snippet": "so if I create a variable like this to say \"hey I've got a value here, something I need to compute inside f1\" or maybe I want to make an array", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 28.359375, "title": "Pointers To Automatic Variables"}, {"snippet": "and i might call it say link_create and I'll expect a key and I'll expect a value", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 26.109375, "title": "Creating Links Strdup"}, {"snippet": "let's actually work out then how we can actually make a whole load of links", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 179.4375, "title": "Struct Typedef LinkedList"}, {"snippet": "I can say: while count is less than argc, because I don't need the null pointer at the end", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 150.46875, "title": "Program Arguments"}, {"snippet": "okay so what should we do with this. well we could change all of the letters", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 149.0625, "title": "Char Array Searching"}, {"snippet": "let's try that and run our program again", "videoIndex": 8, "source": "0090-Environment", "startTime": 200.1875, "title": "Environment"}, {"snippet": "so let's run this now", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 203.859375, "title": "Pointers To Automatic Variables"}, {"snippet": "which means the name \"array\" doesn't mean anything anymore inside our program", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 59.890625, "title": "Pointers To Automatic Variables"}, {"snippet": "as the root on this little system here", "videoIndex": 8, "source": "0090-Environment", "startTime": 33.328125, "title": "Environment"}, {"snippet": "i can see a list of environment variables", "videoIndex": 8, "source": "0090-Environment", "startTime": 19.578125, "title": "Environment"}, {"snippet": "and the return type for that is ssize_t for a signed size integer type", "videoIndex": 17, "source": "0180-getline", "startTime": 412.140625, "title": "Getline"}, {"snippet": "so the time in ASCII, in otherwords in letters, in readable time", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 125.359375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "my format string is just %c. and what character would I want? well the one pointed to by the pointer", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 173.375, "title": "Character Pointers"}, {"snippet": "let's have a look at that. let's see how we can find out how large or small of numbers we can store in different types", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 24.625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "once we've freed some memory, dont free it by accident a second time!", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 280.671875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and you'll see, it's specified here that we'll get back a negative one if an error occurred", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 353.125, "title": "Open Errors and Printf"}, {"snippet": "the first time i dereference it", "videoIndex": 8, "source": "0090-Environment", "startTime": 90.625, "title": "Environment"}, {"snippet": "so notice that scanf and printf, the arguments don't always look the same", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 143, "title": "Scanf Intro"}, {"snippet": "and I could set this to be equal to some arbitrary value. we'll see why in a little bit", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 45.484375, "title": "Scanf Intro"}, {"snippet": "i've set them back to null and anything else inside my link has been set to null", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 194.421875, "title": "Creating Links Strdup"}, {"snippet": "with getline we actually set up two variables", "videoIndex": 17, "source": "0180-getline", "startTime": 57.921875, "title": "Getline"}, {"snippet": "we actually wanted to know what the value is", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 153.296875, "title": "Scanf Intro"}, {"snippet": "so the first time we call getline getline will see that the buffer is certainly not large enough and will allocate enough space", "videoIndex": 17, "source": "0180-getline", "startTime": 198.9375, "title": "Getline"}, {"snippet": "but this function doesn't give us much error checking", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 235.53125, "title": "Program Arguments"}, {"snippet": "this is being adopted into the posix standard", "videoIndex": 17, "source": "0180-getline", "startTime": 19.734375, "title": "Getline"}, {"snippet": "let me show you that", "videoIndex": 8, "source": "0090-Environment", "startTime": 275.46875, "title": "Environment"}, {"snippet": "so, we'll say %d here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 169.59375, "title": "Scanf Intro"}, {"snippet": "and when you do that you actually are sending a signal", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 45, "title": "SIGINT SIGALRM"}, {"snippet": "so this time, because we sent a new line, printf() will be making that call to write()", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 144.375, "title": "Open Errors and Printf"}, {"snippet": "so let's just put a zero directly into that byte", "videoIndex": 17, "source": "0180-getline", "startTime": 318.84375, "title": "Getline"}, {"snippet": "so that's why I get a segmentation fault if I try to change the constant memory", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 342.515625, "title": "Character Pointers"}, {"snippet": "strlen() returned 0", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 254.0625, "title": "Character Pointers"}, {"snippet": "now see this working on some actual source code", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 170.09375, "title": "Get Put Char"}, {"snippet": "where we also destroy the information inside that link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 168.21875, "title": "Creating Links Strdup"}, {"snippet": "let us run my code instead", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 81.078125, "title": "SIGINT SIGALRM"}, {"snippet": "here's my mistake: I should have said argc here for count", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 180.484375, "title": "Program Arguments"}, {"snippet": "though we often say a byte means 8 bits in modern parlance, it doesn't have to be true", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 112.921875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so here is how we can use getline", "videoIndex": 17, "source": "0180-getline", "startTime": 54.328125, "title": "Getline"}, {"snippet": "we can see we managed to compile a program called program here", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 102.546875, "title": "Hello World"}, {"snippet": "great i've got a little program that can print out secrets", "videoIndex": 8, "source": "0090-Environment", "startTime": 255.109375, "title": "Environment"}, {"snippet": "or if I wanted to make it point to itself, I can say \"ptr1\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 255.515625, "title": "Struct Typedef LinkedList"}, {"snippet": "and that's why our little function here called currenttime() is useful", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 164.234375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "okay so here is my program every three seconds it is going to print root", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 120.296875, "title": "SIGINT SIGALRM"}, {"snippet": "and I want to take that and pull it apart into a string and an integer", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 32.421875, "title": "Scanf Intro"}, {"snippet": "in many many respects", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 89.5, "title": "Fork Waitpid Forkbomb"}, {"snippet": "let's do something a little bit surprising here", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 70.90625, "title": "Follow The Int Pointer"}, {"snippet": "we better make sure that our Link is properly initialized", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 236.859375, "title": "Struct Typedef LinkedList"}, {"snippet": "so that's our little struct here. a semicolon is required at the end", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 39.609375, "title": "Struct Typedef LinkedList"}, {"snippet": "and similarly for the capacity as well", "videoIndex": 17, "source": "0180-getline", "startTime": 139.984375, "title": "Getline"}, {"snippet": "and in fact the parent finished early so this is the hash of the terminal saying what would you like to do now", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 352.859375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "but because that may also signify an error condition or a termination condition we use it immediately to check inside part of a while loop or an if statement", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 46.671875, "title": "Get Put Char"}, {"snippet": "so that's what the asterisk does means actually okay it's time to go and talk to memory", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 193.59375, "title": "Follow The Int Pointer"}, {"snippet": "so we should just check to see what we're going to write here", "videoIndex": 17, "source": "0180-getline", "startTime": 289.8125, "title": "Getline"}, {"snippet": "so for example I could have written the following", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 203.734375, "title": "Follow The Int Pointer"}, {"snippet": "but I want to talk about the variables that we might put inside these", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 25.484375, "title": "Pointers To Automatic Variables"}, {"snippet": "and for the score, we want to write it into our score variable", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 106.015625, "title": "Scanf Intro"}, {"snippet": "so that i get a child that looks just like me", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 85.3125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "pointers to characters that \u00a0each character is exactly one byte", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 181.109375, "title": "Character Pointers"}, {"snippet": "It happens to beinside special variables", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 286.375, "title": "Hello Std Err"}, {"snippet": "Okay, so what we see on the console output is anything written to standard error", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 177.171875, "title": "Hello Std Err"}, {"snippet": "why? because when we called open(), it gave us back a file descriptor for stream number one. and, that is the. that is where all the standard output is going to go", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 275.140625, "title": "Open Errors and Printf"}, {"snippet": "I can do \"ls\" and see if anything exists starting with \"out\"", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 329.1875, "title": "Open and Create a file"}, {"snippet": "so I can comment out that line", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 253.578125, "title": "Char Array Searching"}, {"snippet": "okay so that's it for now, it's now time for you to play with creating more links", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 309.84375, "title": "Creating Links Strdup"}, {"snippet": "the last thing we'll do today is make our program crash", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 280.28125, "title": "Character Pointers"}, {"snippet": "and when we get to the null byte we will finish", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 160.8125, "title": "Character Pointers"}, {"snippet": "So, \"output.txt\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 166.421875, "title": "Hello Std Err"}, {"snippet": "so sigint is one common signal that we send our programs", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 150.4375, "title": "SIGINT SIGALRM"}, {"snippet": "okay so we don't have to display the character just as a character", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 73.53125, "title": "Get Put Char"}, {"snippet": "and it might be tempting to write an astericks here", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 160.859375, "title": "Char Array Searching"}, {"snippet": "write() is the low level call that we make to the operating system", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 8.15625, "title": "Open Errors and Printf"}, {"snippet": "and then each of those processes calls fork", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 423.703125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "well, you can imagine we have a program that is calculating something", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 68.28125, "title": "Hello Std Err"}, {"snippet": "so, I want to truncate as well", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 41.328125, "title": "Open and Create a file"}, {"snippet": "meanwhile the parent was waiting for the async condition and when that happened", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 305.96875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "well, again, the limits.h includes a useful constants here", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 168.796875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so let's see if my p is, at when I look at that memory location, whether it's a lowercase l", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 224.640625, "title": "Char Array Searching"}, {"snippet": "the array variable won't be pointing to memory that is valid any longer", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 30.21875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "perhaps in the background", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 234.828125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so we got four", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 427, "title": "Fork Waitpid Forkbomb"}, {"snippet": "Let's, for example, use this. Instead of error messages, we'll put a little dot to see this", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 98.28125, "title": "Hello Std Err"}, {"snippet": "so i'll print it out as an integer and let's have a look to see what we can find inside our buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 221.265625, "title": "Getline"}, {"snippet": "finally this call is going to give us back an integer, a file descriptor", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 60.28125, "title": "Open and Create a file"}, {"snippet": "we didn't need this for arrays because that's what the array name gives us automatically", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 209.203125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "h e l l o, but actually C strings contain an extra character at the end", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 11.734375, "title": "Character Pointers"}, {"snippet": "right now, our code doesn't check for any error", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 307.40625, "title": "Open Errors and Printf"}, {"snippet": "and we'll loop through and we'll print out all of those values", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 137.453125, "title": "Program Arguments"}, {"snippet": "Let me print it out", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 284.265625, "title": "Hello Std Err"}, {"snippet": "so that'll give me two pointers", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 37.40625, "title": "Creating Links Strdup"}, {"snippet": "and so we will have not just a buffer to our character array", "videoIndex": 17, "source": "0180-getline", "startTime": 102.1875, "title": "Getline"}, {"snippet": "for example we see down here that I am running as superuser", "videoIndex": 8, "source": "0090-Environment", "startTime": 27.40625, "title": "Environment"}, {"snippet": "this means that the next argument I give in printf() better be an integer value", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 55.046875, "title": "Open Errors and Printf"}, {"snippet": "great! and it managed to parse both variables", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 345.703125, "title": "Scanf Intro"}, {"snippet": "and now i've got a program called Hello", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 146.375, "title": "Hello World"}, {"snippet": "okay that's enough for me, time for you to play. bye!", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 376.5, "title": "Char Array Searching"}, {"snippet": "great so I'm going to pipe it into my program", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 111.78125, "title": "Get Put Char"}, {"snippet": "and some of them you might recognize already", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 14.546875, "title": "Program Arguments"}, {"snippet": "actually what we care about is whether p is pointing to memory that holds zero", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 137.28125, "title": "Char Array Searching"}, {"snippet": "and, now it's waiting for input", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 336.96875, "title": "Scanf Intro"}, {"snippet": "this is so useful with arrays", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 198.125, "title": "Follow The Int Pointer"}, {"snippet": "or we might want to print some progress information", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 79.90625, "title": "Hello Std Err"}, {"snippet": "we do that by saying \"one\" except we don't want \"one\" we want the address of \"one\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 162.28125, "title": "Struct Typedef LinkedList"}, {"snippet": "depending on the particular implementation of the C language for this particular architecture", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 303.859375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "to actually give us a human readable version of the time", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 49.921875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "that's OK, our pointers don't care what they point to", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 362.046875, "title": "Char Array Searching"}, {"snippet": "let's run that", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 75.625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "this is fantastic right", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 210.546875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "inside memory", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 21.40625, "title": "Scanf Intro"}, {"snippet": "so instead of my little loop if I include string.h", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 213.90625, "title": "Character Pointers"}, {"snippet": "so here's the number of seconds since 1970", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 83.25, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "welcome so let's talk about some options other than automatic variables", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 0, "title": "Time For Mallocing Heap Memory"}, {"snippet": "we'll compile it and run it and great it prints out hello", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 138.234375, "title": "Hello World"}, {"snippet": "all it does is ask for the environment of home", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 19.0625, "title": "SIGINT SIGALRM"}, {"snippet": "then that's longer than our buffer", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 206.78125, "title": "Scanf Intro"}, {"snippet": "And, if, for example, I type \"man open\" on a command line on a real linux machine. it doesn't quite work yet in my small virtual one. we didn't have enough memory to include all the manual pages yet", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 87.328125, "title": "Open and Create a file"}, {"snippet": "if i say let me print out a string and a new line and if I do star pointer we can follow that money if you like", "videoIndex": 8, "source": "0090-Environment", "startTime": 116.53125, "title": "Environment"}, {"snippet": "but the big take home message for getline is first of all", "videoIndex": 17, "source": "0180-getline", "startTime": 380.609375, "title": "Getline"}, {"snippet": "well let us first of all show that there really are two different processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 51.921875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "score is just going to give us whatever value score happens to hold", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 117.828125, "title": "Scanf Intro"}, {"snippet": "so each time we add one, we actually want to progress to the next integer stored in memory", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 118.15625, "title": "Follow The Int Pointer"}, {"snippet": "the pointer to the next link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 11.984375, "title": "Creating Links Strdup"}, {"snippet": "okay so it gave us back a string and it this time the pointer was half way through \"hello world\"", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 354.9375, "title": "Char Array Searching"}, {"snippet": "well i want to be able to reference the sub parts", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 77.609375, "title": "Creating Links Strdup"}, {"snippet": "so for that i can use memory set", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 174.203125, "title": "Creating Links Strdup"}, {"snippet": "so I can say echo Hello World", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 27.78125, "title": "Program Arguments"}, {"snippet": "now so we can see what's going on, I'm not going to close standard out anymore.", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 327.265625, "title": "Open Errors and Printf"}, {"snippet": "yes we get two worlds", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 31.046875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "if you already know the name of the environment variable that you wish to use", "videoIndex": 8, "source": "0090-Environment", "startTime": 212.640625, "title": "Environment"}, {"snippet": "there is an alternative syntax which is to use the square brackets", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 200.140625, "title": "Follow The Int Pointer"}, {"snippet": "let us call this", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 164.28125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "in my main method i want to print out the current time ", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 7.421875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "alright so I'll have my function called change down here and it takes a pointer to that memory", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 114.6875, "title": "Char Array Searching"}, {"snippet": "now i am going to show you some systems programming magic", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 4.703125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so let's have an integer value called c and inside my while condition I'm actually going to assign the result into c", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 28.0625, "title": "Get Put Char"}, {"snippet": "it is still possible to stop our program here", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 141.59375, "title": "SIGINT SIGALRM"}, {"snippet": "I just want to get the whole line", "videoIndex": 17, "source": "0180-getline", "startTime": 16.15625, "title": "Getline"}, {"snippet": "so this is going to take six bytes of storage", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 22.859375, "title": "Character Pointers"}, {"snippet": "so if that is equal to the character of a newline", "videoIndex": 17, "source": "0180-getline", "startTime": 306.1875, "title": "Getline"}, {"snippet": "it doesn't actually want the value, it wants a pointer to this variable, it wants to know where in memory this variable is", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 183.265625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "So, right now, both the output and the standard error are going to different places", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 147.09375, "title": "Hello Std Err"}, {"snippet": "and later on we can use that to find out say did our child exit normally or was it terminated in a surprising way", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 274.09375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and we'll print this out", "videoIndex": 17, "source": "0180-getline", "startTime": 219.28125, "title": "Getline"}, {"snippet": "for example secret and this will give me back a pointer to a character array", "videoIndex": 8, "source": "0090-Environment", "startTime": 224.578125, "title": "Environment"}, {"snippet": "i'll make it twelve bytes today ", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 264.15625, "title": "Get Put Char"}, {"snippet": "but we didn't want to do that for all the characters, we just wanted to do that for the l's", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 221.359375, "title": "Char Array Searching"}, {"snippet": "that's not something that the system does", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 30.546875, "title": "Open Errors and Printf"}, {"snippet": "and I can say result is sixty five", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 71.28125, "title": "Open Errors and Printf"}, {"snippet": "so i can say write and i can say no", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 110.796875, "title": "SIGINT SIGALRM"}, {"snippet": "the good news is that the man pages tell us which includes we need to put at the top of our program", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 291.78125, "title": "Open and Create a file"}, {"snippet": "and so on", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 83.453125, "title": "Follow The Int Pointer"}, {"snippet": "so this is the simplest way of turning a string into an integer number", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 228.21875, "title": "Program Arguments"}, {"snippet": "so anytime you do hash define, you're talking to the preprocessor to say \"hey, in the future, parts of this file, if you come across this character sequence, then replace it (in this case) with either a 1 or a 2 depending on what it is\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 223.90625, "title": "Hello Std Err"}, {"snippet": "and so we see both their output on our little terminal here", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 45.703125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and we'll see that I've managed to change my integer value to 41424344", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 345.4375, "title": "Get Put Char"}, {"snippet": "let's talk about creating more complicated data types in C", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 1.5, "title": "Struct Typedef LinkedList"}, {"snippet": "so that sounds like a great thing to actually have as a global variable here", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 292.34375, "title": "Creating Links Strdup"}, {"snippet": "right so if we do that now we have got a getline declaration included as part of the #include <stdio.h>", "videoIndex": 17, "source": "0180-getline", "startTime": 46.828125, "title": "Getline"}, {"snippet": "if we wanted to be particularly crazy, we can make the next pointer point to the very same link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 155.609375, "title": "Struct Typedef LinkedList"}, {"snippet": "so far, we've talked about integer and character pointers", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 6.125, "title": "Struct Typedef LinkedList"}, {"snippet": "it has got it's own variables", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 92.921875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "We can compile this, except I've got a surprise for you which is that these particular macros are already defined inside unistd.h", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 240.875, "title": "Hello Std Err"}, {"snippet": "so as an example, let's try printing something out", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 41.671875, "title": "Open Errors and Printf"}, {"snippet": "so amazingly my little kernel here has managed to recover to the point to where i have a working system", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 464.671875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and I can have it as my first pointer", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 225.5, "title": "Struct Typedef LinkedList"}, {"snippet": "and so every two seconds i am doubling the number of processes that are in my system", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 432.015625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so that's why gets is dangerous", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 360.984375, "title": "Get Put Char"}, {"snippet": "so I should call free on my key and free on my value pointer as well", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 263.046875, "title": "Creating Links Strdup"}, {"snippet": "so you can navigate both in the forwards and backwards direction throughout the linked list", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 295.46875, "title": "Struct Typedef LinkedList"}, {"snippet": "each program also has access to environment variables", "videoIndex": 8, "source": "0090-Environment", "startTime": 9.078125, "title": "Environment"}, {"snippet": "and now our Link says \"I'm the last thing. there's no one after me\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 150.046875, "title": "Struct Typedef LinkedList"}, {"snippet": "so, C does not attempt to say it's going to be exactly 8 bits", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 158.578125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "for that, I can say: \"give me the sizeof my link structure\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 194.859375, "title": "Struct Typedef LinkedList"}, {"snippet": "so in a future video i'll tell you about getline and also fgets which don't suffer from these problems", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 369.28125, "title": "Get Put Char"}, {"snippet": "so, if we look over here at our output, we'll see that each time we add one, our address in hexadecimal is going up by four each time", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 93.265625, "title": "Follow The Int Pointer"}, {"snippet": "so how can we guard against some of these errors?", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 316.0625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "ok, so now I better actually find out what the correct syntax is", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 71.34375, "title": "Open and Create a file"}, {"snippet": "we can now find out what the result is which is the number of characters getline has managed to retrieve", "videoIndex": 17, "source": "0180-getline", "startTime": 206.8125, "title": "Getline"}, {"snippet": "so now it's your turn to play. bye!", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 448.453125, "title": "Open Errors and Printf"}, {"snippet": "so here is how we will do this", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 60.328125, "title": "SIGINT SIGALRM"}, {"snippet": "fortunately, there's some macros, some constants, defined inside limits.h", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 46.140625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so we've got \"my value is 65\"", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 108.40625, "title": "Open Errors and Printf"}, {"snippet": "our program compiles correctly, but to be a well-behaved program, really we should free up the memory as well", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 309.734375, "title": "Struct Typedef LinkedList"}, {"snippet": "so let's write a link destroy method destroy", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 147.109375, "title": "Creating Links Strdup"}, {"snippet": "and then we call f1 again", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 201.609375, "title": "Pointers To Automatic Variables"}, {"snippet": "I'll print out the value of my count that's %d and print out its value as a string", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 161.953125, "title": "Program Arguments"}, {"snippet": "so we can find out how many characters we have", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 108.71875, "title": "Character Pointers"}, {"snippet": "what i am going to wait for my child to finish", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 241.703125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "we dont have operator overloading. instead, let's use printf()", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 105.078125, "title": "Open Errors and Printf"}, {"snippet": "I promised you that I'd mention a few more mistakes that we can make with heap memory", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 240.203125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "So there's our forty-two.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 298.890625, "title": "Hello Std Err"}, {"snippet": "we've got a little bit of a problem here", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 50.921875, "title": "Hello World"}, {"snippet": "well thats great if we only need one link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 175.25, "title": "Struct Typedef LinkedList"}, {"snippet": "and i'm going to write my function called currenttime that returns a new string array", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 11.71875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "we could say star p equals", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 158.53125, "title": "Char Array Searching"}, {"snippet": "why is that", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 33.09375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "I'll talk about how we can do a better job using scanf in a different lecture", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 239.40625, "title": "Program Arguments"}, {"snippet": "if we are creating a new file we better say who can read this file and who can write to this file and who can execute this file", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 45.0625, "title": "Open and Create a file"}, {"snippet": "and that's not surprising because we need thirty two bits to represent all numbers between minus two billion and plus two billion", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 239.96875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "inside our processes's memory", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 296.875, "title": "Pointers To Automatic Variables"}, {"snippet": "and in fact it is standard for the parent to wait for the child to finish", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 221.109375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and if I do 135 I get 024", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 160.21875, "title": "Get Put Char"}, {"snippet": "I could've returned zero but I wanted to show you an alternative way to quit a C program is to call exit", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 383.265625, "title": "Open Errors and Printf"}, {"snippet": "I want to show you just a little idea here that actually I've got two file descriptors which are valid when my program starts.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 53.671875, "title": "Hello Std Err"}, {"snippet": "and it only managed to read into the buffer", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 244.25, "title": "Scanf Intro"}, {"snippet": "okay so now when we run this", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 135.1875, "title": "Hello World"}, {"snippet": "just like we've seen so far with file number 1 and file number 2", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 64.5625, "title": "Open and Create a file"}, {"snippet": "though both ptr and array points to the first letters", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 19.359375, "title": "Char Array Searching"}, {"snippet": "in fact, here's a little secret about C that I could actually swap these around", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 217.984375, "title": "Follow The Int Pointer"}, {"snippet": "now we can do interrupts at the software level and we can respond to things which happen in our environment very quickly", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 241.90625, "title": "SIGINT SIGALRM"}, {"snippet": "and we want to quit here", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 372.875, "title": "Open Errors and Printf"}, {"snippet": "and I'm going to use malloc which is also declared inside stdlib.h", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 186.375, "title": "Struct Typedef LinkedList"}, {"snippet": "for example, it could be that open() could fail. suppose, for example, we gave it a bad file descriptor", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 316.6875, "title": "Open Errors and Printf"}, {"snippet": "and there is actually a typedef", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 170.921875, "title": "Open and Create a file"}, {"snippet": "so we're going to say ampersand score", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 125.6875, "title": "Scanf Intro"}, {"snippet": "so in this case we want to say create a brand new file and truncate it back to 0 if it doesn't exist", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 33.96875, "title": "Open and Create a file"}, {"snippet": "but I don't want that as a value, I just want to turn that into a string", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 97.265625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "lets increment the pointer", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 102.8125, "title": "Character Pointers"}, {"snippet": "when you see & it means that I don't want to know about the variable itself, but where it is stored in memory", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 196.203125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and you'll see that first of all the name is truncated and that secondly, the return value of our scanf call here was one", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 235.8125, "title": "Scanf Intro"}, {"snippet": "hi welcome", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 0, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "Right so now it's your turn to play: create a file and see if you can send some bytes to that file.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 343.203125, "title": "Open and Create a file"}, {"snippet": "but this has a problem and we'll see why in a moment why this function actually call is being removed from the c standard", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 244.890625, "title": "Get Put Char"}, {"snippet": "so \"Strlen returned\" and we'll talk about how to fix my program in a moment", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 237.203125, "title": "Character Pointers"}, {"snippet": "and zero is considered \"false\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 313.90625, "title": "Hello Std Err"}, {"snippet": "which if we are running in an older posix environment", "videoIndex": 8, "source": "0090-Environment", "startTime": 55, "title": "Environment"}, {"snippet": "so it is one thing to create a few", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 333.09375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "but, you'll see on the lefthand side that we've got open() failed, so that's the part of the error message that I supplied", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 417.859375, "title": "Open Errors and Printf"}, {"snippet": "also, a more robust version of this program would check that malloc actually succeeded", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 334.984375, "title": "Struct Typedef LinkedList"}, {"snippet": "ABCD", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 69.765625, "title": "Get Put Char"}, {"snippet": "so always be careful if you are returning a pointer to something. make sure that that memory is still valid", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 341.609375, "title": "Pointers To Automatic Variables"}, {"snippet": "and, let's get rid of the first one", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 183.03125, "title": "Open Errors and Printf"}, {"snippet": "more about that in a moment", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 28.75, "title": "Hello World"}, {"snippet": "there are other integer types you'll see things like short (which is generally shorter than an int), long (which is generally longer), long long (which is even longer, still)", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 248.265625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "we can change it so I can change it to \"jello world\" for example", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 79.6875, "title": "Char Array Searching"}, {"snippet": "so we can use sizeof() on constant strings", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 58.46875, "title": "Character Pointers"}, {"snippet": "so for example if I want one hundred and twenty eight bytes I would say malloc one hundred and twenty eight", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 125.046875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "why is that?", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 262.796875, "title": "Open Errors and Printf"}, {"snippet": "now it's time for you to play", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 163.484375, "title": "Hello World"}, {"snippet": "let's talk about getline", "videoIndex": 17, "source": "0180-getline", "startTime": 1.765625, "title": "Getline"}, {"snippet": "i get a pointer and that pointer itself is going to point to character strings", "videoIndex": 8, "source": "0090-Environment", "startTime": 93.46875, "title": "Environment"}, {"snippet": "and we've just changed our program so that all future output goes to output.text", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 297.0625, "title": "Open Errors and Printf"}, {"snippet": "i've now got a way to make long lived pieces of memory and put data inside them", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 211.5625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "hi so this video is about the environment", "videoIndex": 8, "source": "0090-Environment", "startTime": 0, "title": "Environment"}, {"snippet": "I could have another function that finds letters as well", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 294.484375, "title": "Char Array Searching"}, {"snippet": "let's say I had some data and I did this", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 6.359375, "title": "Follow The Int Pointer"}, {"snippet": "in fact, that is expected by specification because if we successfully open a file, we'll get back the lowest unused integer (the lowest unused file descriptor)", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 200.890625, "title": "Open Errors and Printf"}, {"snippet": "it is going to free up the old buffer and then call malloc so that we get a larger buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 155.828125, "title": "Getline"}, {"snippet": "please call my function instead", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 217.640625, "title": "SIGINT SIGALRM"}, {"snippet": "and the integer pattern for a hundred and one in the next four bytes", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 163.734375, "title": "Follow The Int Pointer"}, {"snippet": "a little message like hello", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 30.09375, "title": "Hello World"}, {"snippet": "I'm going to say later on compiler, I expect to actually define a function and I'll give you the actual code to create this change method", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 266.046875, "title": "Char Array Searching"}, {"snippet": "and then the number of characters or bytes that i actually want to send here", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 33.265625, "title": "Hello World"}, {"snippet": "and in fact fork", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 150, "title": "Fork Waitpid Forkbomb"}, {"snippet": "which as this is a 32-bit machine is four bytes", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 40.859375, "title": "Char Array Searching"}, {"snippet": "what can we do with this?", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 128.5625, "title": "Char Array Searching"}, {"snippet": "so i could attempt to compile this for example", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 94.828125, "title": "Hello World"}, {"snippet": "so it's time to make a system call and then we will format that using a c function called ctime()", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 41.625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and they will wrap the call to write()", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 38.734375, "title": "Open Errors and Printf"}, {"snippet": "not very accurate, we should probably change it, but it did print out what it thinks the current time", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 232.5625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "instead it specifies minimums that should be supported by the architecture", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 19.15625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so now I've got a syntactically correct program", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 21.4375, "title": "Pointers To Automatic Variables"}, {"snippet": "okay, so, f2 f2", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 116.859375, "title": "Pointers To Automatic Variables"}, {"snippet": "#include <string.h>\u00a0let's run this", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 190.765625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "Hello, suppose we want to actually print out some integer values", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 0, "title": "Open Errors and Printf"}, {"snippet": "ok, let's print it out", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 185.15625, "title": "Program Arguments"}, {"snippet": "which takes a pointer to the link that is going to disappear so we can call that just p", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 150.34375, "title": "Creating Links Strdup"}, {"snippet": "now right now our code suffers from a terrible flaw which is that we've assumed that our automatic variables buffer capacity will be set to nothing", "videoIndex": 17, "source": "0180-getline", "startTime": 179.890625, "title": "Getline"}, {"snippet": "and also to see if there was an error or not", "videoIndex": 17, "source": "0180-getline", "startTime": 409.953125, "title": "Getline"}, {"snippet": "in other words result is null", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 163.265625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "we'll say okay write", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 23.765625, "title": "Hello World"}, {"snippet": "if I had included a dot here, this is also an invalid file name because a single dot corresponds to the current directory", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 433.453125, "title": "Open Errors and Printf"}, {"snippet": "and if we had three forks now we have eight", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 364.671875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "all contiguous in memory", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 30.359375, "title": "Follow The Int Pointer"}, {"snippet": "rather than having the default behavior which as we know is to stop the program or quit the program", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 75.3125, "title": "SIGINT SIGALRM"}, {"snippet": "which signify what those values actually mean", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 201.546875, "title": "Hello Std Err"}, {"snippet": "a common error is to write equals instead of double equals for comparison", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 367.046875, "title": "Open Errors and Printf"}, {"snippet": "instead, if I've got an integer value which is nonzero, that is treated as a true value", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 24.765625, "title": "Hello Std Err"}, {"snippet": "or a negative value if it failed", "videoIndex": 17, "source": "0180-getline", "startTime": 214.953125, "title": "Getline"}, {"snippet": "okay, so, let's now finally compile this and check that it works", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 303.40625, "title": "Struct Typedef LinkedList"}, {"snippet": "this time, we've compiled it, and we should see that \"my value is 65\" appear before my hellos", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 136.171875, "title": "Open Errors and Printf"}, {"snippet": "but today we're going to use typedef for our link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 75.515625, "title": "Struct Typedef LinkedList"}, {"snippet": "But it's up to us. We could choose a different value, for example we could choose the value 42.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 266.640625, "title": "Hello Std Err"}, {"snippet": "then my array lives forever or at least for the length of my process", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 51.25, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so i want to finish on a common programming error that can really bring down a server", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 317.875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "okay so this time it read it correctly and in our printf we didn't get that unwanted extra newline", "videoIndex": 17, "source": "0180-getline", "startTime": 335.78125, "title": "Getline"}, {"snippet": "but if I actually want to print them out I better actually store the value of getchar", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 24.40625, "title": "Get Put Char"}, {"snippet": "it won't be able to keep track of any more processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 443.65625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and, this calls f1", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 176.0625, "title": "Pointers To Automatic Variables"}, {"snippet": "we can control our programs and we can also work with very large amounts of data coming in", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 255.09375, "title": "SIGINT SIGALRM"}, {"snippet": "and, it's complaining that it can't open that because dot corresponds to a directory", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 441.953125, "title": "Open Errors and Printf"}, {"snippet": "see if this works", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 98.296875, "title": "Hello World"}, {"snippet": "i say okay give me the address of my variable", "videoIndex": 17, "source": "0180-getline", "startTime": 136.46875, "title": "Getline"}, {"snippet": "that's why it's called an automatic variable", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 74.03125, "title": "Pointers To Automatic Variables"}, {"snippet": "it's called change, it takes a pointer to a character and it doesn't return anything", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 279.4375, "title": "Char Array Searching"}, {"snippet": "and we'll do data plus two", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 79.609375, "title": "Follow The Int Pointer"}, {"snippet": "And, we've talked about these two different output streams. Now it's your turn to play with this. After that, let's have a go at creating some new files directly from C", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 317.609375, "title": "Hello Std Err"}, {"snippet": "so both the processes print out world", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 43.109375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "have fun playing bye", "videoIndex": 17, "source": "0180-getline", "startTime": 429.453125, "title": "Getline"}, {"snippet": "great, so, let's run this", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 244.34375, "title": "Open Errors and Printf"}, {"snippet": "so memset where I give it a pointer that I want to use", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 177.203125, "title": "Creating Links Strdup"}, {"snippet": "and I guess you could figure out what this would do as well", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 169.359375, "title": "Follow The Int Pointer"}, {"snippet": "and we will also print out what the last thing points to", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 78.515625, "title": "Program Arguments"}, {"snippet": "this time change the loop so I add one to p each time", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 190.640625, "title": "Char Array Searching"}, {"snippet": "okay that's it for me", "videoIndex": 17, "source": "0180-getline", "startTime": 428.0625, "title": "Getline"}, {"snippet": "it has to be a pointer to a function", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 88.25, "title": "SIGINT SIGALRM"}, {"snippet": "we could imagine for example reading from a file where the very last byte is not actually a newline", "videoIndex": 17, "source": "0180-getline", "startTime": 284.109375, "title": "Getline"}, {"snippet": "Welcome so let's start creating some files", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 0, "title": "Open and Create a file"}, {"snippet": "we have a couple of errors here", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 247.984375, "title": "Char Array Searching"}, {"snippet": "well, in being portable, C needs to be able to read and write every bit inside memory and each bit inside each memory should only live inside one addressable memory location", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 130.609375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "and our buffer, of course, if going to need one extra one to hold the terminating byte for this string", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 222, "title": "Scanf Intro"}, {"snippet": "these are already included inside an existing file which I get for free", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 116.84375, "title": "Hello World"}, {"snippet": "so now i've got that I can set the key to be a key and the value to be the value", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 89.734375, "title": "Creating Links Strdup"}, {"snippet": "so this is crazy but actually two square bracket data would evaluate to the same thing", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 229.5625, "title": "Follow The Int Pointer"}, {"snippet": "and, you'll see that actually this was printed out after the hello hello hello hello", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 110.828125, "title": "Open Errors and Printf"}, {"snippet": "I want to use \"create\" and I want to truncate it as well", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 124.953125, "title": "Open and Create a file"}, {"snippet": "and in fact, C is very careful to say that a byte does not mean 8 bits", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 119.53125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "if you're coming from a cpp background, there's no IO streams", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 101.390625, "title": "Open Errors and Printf"}, {"snippet": "and is already going to give you the memory address that you'd like scanf to change", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 276.453125, "title": "Scanf Intro"}, {"snippet": "So that's the permissions we want", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 224.765625, "title": "Open and Create a file"}, {"snippet": "so that's a lot of processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 436.59375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "that requests 128 bytes from the heap", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 4, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so let's remember that when i return this", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 115.5625, "title": "Creating Links Strdup"}, {"snippet": "and let's say store the value a hundred in there", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 146.890625, "title": "Follow The Int Pointer"}, {"snippet": "and if I declare variables like this, outside of my functions, then they live forever", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 89.8125, "title": "Struct Typedef LinkedList"}, {"snippet": "so what do I have here?", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 21.296875, "title": "Follow The Int Pointer"}, {"snippet": "that data points to the very first element", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 67.890625, "title": "Follow The Int Pointer"}, {"snippet": "the size of array is the total size required to hold the whole array", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 44.421875, "title": "Char Array Searching"}, {"snippet": "in other words it's great if you just want to call it once, and it will use it's static storage to give you back the time in a readable format", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 146.53125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so we don't need to return anything because we are actually going to be using the parameter to point to some memory that we are going to change", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 120.625, "title": "Char Array Searching"}, {"snippet": "we are not trying to say give me additional storage for this", "videoIndex": 8, "source": "0090-Environment", "startTime": 72.15625, "title": "Environment"}, {"snippet": "and let's call it with say five", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 274.28125, "title": "Pointers To Automatic Variables"}, {"snippet": "so I've now got thirty two bytes of storage", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 14.4375, "title": "Follow The Int Pointer"}, {"snippet": "to say \"oh, you're just using it.\" and, what we should've done is actually declare the function signature of printf()", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 85.3125, "title": "Open Errors and Printf"}, {"snippet": "so we are going to say at the same spot set that equal to zero", "videoIndex": 17, "source": "0180-getline", "startTime": 321.8125, "title": "Getline"}, {"snippet": "we can use them to control our processes and even do things asynchronously", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 8.765625, "title": "SIGINT SIGALRM"}, {"snippet": "and each time around the loop, increment count", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 157.640625, "title": "Program Arguments"}, {"snippet": "now it's time for you to play. bye!", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 356.15625, "title": "Struct Typedef LinkedList"}, {"snippet": "if we do control backslash then we force it to quit", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 144.4375, "title": "SIGINT SIGALRM"}, {"snippet": "Right so our program ran and it's still printing \"Hello\" to standard out and dot to standard error", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 317.078125, "title": "Open and Create a file"}, {"snippet": "and you'll see that everything printed to standard out has been sent to our file", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 268.3125, "title": "Open Errors and Printf"}, {"snippet": "so these last two lines are the same", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 215.875, "title": "Follow The Int Pointer"}, {"snippet": "and secondly we are freeing it to say okay this memory can now be reused for other purposes", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 206.484375, "title": "Creating Links Strdup"}, {"snippet": "i can always just reload the page", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 392.4375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "okay have fun and i'll see you in the next video", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 482.453125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so let's check that the result was positive", "videoIndex": 17, "source": "0180-getline", "startTime": 273.34375, "title": "Getline"}, {"snippet": "so let us make a note of that", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 161.71875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so when this code runs it's actually going to copy the contents of that string literal \"hello world\" into the new array object", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 51.015625, "title": "Char Array Searching"}, {"snippet": "now I can say \"number x\" instead of \"int x\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 69.734375, "title": "Struct Typedef LinkedList"}, {"snippet": "if we look at the left hand side", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 101.265625, "title": "Hello World"}, {"snippet": "so it looks a little bit like that", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 83.875, "title": "Hello World"}, {"snippet": "we can give it a type and it will tell us how many bytes (or if you prefer, how many characters) are required to hold that particular kind", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 205.515625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "now what if we've got a problem with open() ?", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 304.265625, "title": "Open Errors and Printf"}, {"snippet": "so usually we think about our programs as just turning into one single process", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 0, "title": "Fork Waitpid Forkbomb"}, {"snippet": "notice as well that these types are signed", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 265.515625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "We'll copy the read one and we'll have write permission as well.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 204.15625, "title": "Open and Create a file"}, {"snippet": "and in fact pretty soon the kernel will run out of space", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 438.5625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "I want to do something", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 101.484375, "title": "Character Pointers"}, {"snippet": "We'll say that the user has read and write permission", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 198.765625, "title": "Open and Create a file"}, {"snippet": "so if level is nonzero, then call it again", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 272.296875, "title": "Pointers To Automatic Variables"}, {"snippet": "so, we'll print that out. I'll get rid of my unnecessary variable here", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 71.84375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so, let's say we've got a struct and we'll say my struct I'll call it say Link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 15.734375, "title": "Struct Typedef LinkedList"}, {"snippet": "because we're setting scanf how many character to read from the input", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 216.953125, "title": "Scanf Intro"}, {"snippet": "so, there's my simple linked list", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 288.359375, "title": "Struct Typedef LinkedList"}, {"snippet": "in fact it takes a void pointer which means point to it without any particular type", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 85.421875, "title": "Hello World"}, {"snippet": "so when we add one to our pointer, line ten here", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 186.65625, "title": "Character Pointers"}, {"snippet": "and I've got five characters to display", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 8.296875, "title": "Character Pointers"}, {"snippet": "and it prints no no so it's refusing to quit", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 129.84375, "title": "SIGINT SIGALRM"}, {"snippet": "so, data plus one", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 77.0625, "title": "Follow The Int Pointer"}, {"snippet": "We'll run this and we should (if we got everything correct) see \"Hello\" and...lib lib lib lib", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 104.859375, "title": "Hello Std Err"}, {"snippet": "see that actually the correct type to use is size_t", "videoIndex": 17, "source": "0180-getline", "startTime": 86.96875, "title": "Getline"}, {"snippet": "and I need a simple way to turn a string of digits into an integer", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 219.09375, "title": "Program Arguments"}, {"snippet": "we can now update my original code so that it finds the first 'o' and gives you back a pointer to that", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 333.34375, "title": "Char Array Searching"}, {"snippet": "so in other words could something bad happen to our other variables", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 289.71875, "title": "Get Put Char"}, {"snippet": "so how do i do that", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 40.5625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "both trying to run at the same time", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 68.8125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so that's what static does", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 66.28125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "but that is fork bombs and you should avoid from accidentally doing this", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 472.515625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "you'll see here's a whole lot of programs that I can run from my terminal window", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 9.859375, "title": "Program Arguments"}, {"snippet": "so let us grab that as well", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 161.0625, "title": "Open and Create a file"}, {"snippet": "alright time for you to play with character poitners, bye", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 348.53125, "title": "Character Pointers"}, {"snippet": "so let's grab those and insert them in here", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 301.765625, "title": "Open and Create a file"}, {"snippet": "let's at the very end here we can call free on the buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 358.59375, "title": "Getline"}, {"snippet": "scanf actually tells us something else which is how many arguments it correctly managed to parse", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 158.171875, "title": "Scanf Intro"}, {"snippet": "so it knows that the particular block of memory is free", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 265.625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "if we wanted to change that, then we could say one.value equals fourty two", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 127.09375, "title": "Struct Typedef LinkedList"}, {"snippet": "so we can actually use those values inside our variables", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 11.578125, "title": "Scanf Intro"}, {"snippet": "and let's flush our little buffer by sending in a newline", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 185.515625, "title": "Open Errors and Printf"}, {"snippet": "so let's run this and we can type something in and it echos it back to us", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 277.609375, "title": "Get Put Char"}, {"snippet": "and also how many bytes each different type is ", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 30.671875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so that's how we make linked lists in C", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 353.25, "title": "Struct Typedef LinkedList"}, {"snippet": "i'll call it ptr and i initialize it to environ", "videoIndex": 8, "source": "0090-Environment", "startTime": 107.484375, "title": "Environment"}, {"snippet": "there's no way to tell gets that we shouldn't accept input that is too long for it", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 362.6875, "title": "Get Put Char"}, {"snippet": "so why don't we overwrite the very last character with null with a terminating byte", "videoIndex": 17, "source": "0180-getline", "startTime": 259.375, "title": "Getline"}, {"snippet": "as one and two are already being used, we get back three", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 213.5625, "title": "Open Errors and Printf"}, {"snippet": "otherwise you will have a system administrator telling you that you cannot log onto that machine anymore", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 477.953125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "here's why", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 107.171875, "title": "Follow The Int Pointer"}, {"snippet": "i have destroyed the key and value pointers", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 190.765625, "title": "Creating Links Strdup"}, {"snippet": "some things that are noteworthy here is first of all they have different sizes", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 24.90625, "title": "Char Array Searching"}, {"snippet": "in other words i'm going to dereference it twice", "videoIndex": 8, "source": "0090-Environment", "startTime": 87.890625, "title": "Environment"}, {"snippet": "Hello! Let's talk about automatic variables", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 0, "title": "Pointers To Automatic Variables"}, {"snippet": "and we'll print out an error", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 388.40625, "title": "Open Errors and Printf"}, {"snippet": "let me try to print out the value of secret as an integer", "videoIndex": 8, "source": "0090-Environment", "startTime": 276.96875, "title": "Environment"}, {"snippet": "now, it's your turn. Bye!", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 245.984375, "title": "Follow The Int Pointer"}, {"snippet": "and if you do that, that means \"hey, just read from stdin\"", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 325.296875, "title": "Scanf Intro"}, {"snippet": "we'll find out what the other values of argv is", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 127.609375, "title": "Program Arguments"}, {"snippet": "let's do that. after we've opened our file, I'll send \"fildes is\" and, we will print out fildes.", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 161.78125, "title": "Open Errors and Printf"}, {"snippet": "well that's fine if I knew for example that this will always be used with string constants or I am taking control of those values that I send in and I happen to know that their lifetime is longer than the link's lifetime", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 123.46875, "title": "Creating Links Strdup"}, {"snippet": "so you'll see the size of the pointer is the number of bytes to actually hold the character pointer", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 36.03125, "title": "Char Array Searching"}, {"snippet": "well let's just check to see really if it is an int or if we should be doing a different type", "videoIndex": 17, "source": "0180-getline", "startTime": 77.71875, "title": "Getline"}, {"snippet": "when you add an integer to an address pointer", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 107.875, "title": "Follow The Int Pointer"}, {"snippet": "so how many characters is that? I've got \"one, two, three, four, five, six, and a new line so that's seven characters\"", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 244.84375, "title": "Open and Create a file"}, {"snippet": "and never return a pointer to an automatic variable", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 348.09375, "title": "Pointers To Automatic Variables"}, {"snippet": "i haven't made any new string arrays", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 112.359375, "title": "Creating Links Strdup"}, {"snippet": "in fact it is the signal that is being sent to our program", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 101.4375, "title": "SIGINT SIGALRM"}, {"snippet": "but also size as well to say how big is our buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 108.109375, "title": "Getline"}, {"snippet": "how we started the program", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 104.203125, "title": "Program Arguments"}, {"snippet": "so the secret is and we can call exit", "videoIndex": 8, "source": "0090-Environment", "startTime": 239.578125, "title": "Environment"}, {"snippet": "and it also as you see prints out alarm clock on the shell", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 202.03125, "title": "SIGINT SIGALRM"}, {"snippet": "lets move it onto the next character", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 103.96875, "title": "Character Pointers"}, {"snippet": "so quite often, we can use, or you'll find that people use \"typedef\"", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 53.96875, "title": "Struct Typedef LinkedList"}, {"snippet": "and we will print it out", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 60.46875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "We're not doing any error checking right now, we're just trying to write the smallest possible program to create a file and send something to it", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 271.015625, "title": "Open and Create a file"}, {"snippet": "and that storage space is found inside the program's heap", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 120.78125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and so when you call alarm you are going to say give me a special signal called sigalrm in this many seconds", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 167.5625, "title": "SIGINT SIGALRM"}, {"snippet": "so as always that means simply that now the variable name array can only be connected to that piece of memory inside my little method", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 75.65625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "in other words, 4 bytes or so", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 206.359375, "title": "Struct Typedef LinkedList"}, {"snippet": "the asterisks means use the pointer follow the pointer dereference the pointer", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 175.234375, "title": "Follow The Int Pointer"}, {"snippet": "lets run it and i'll put in a new line at the end", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 129.5, "title": "Character Pointers"}, {"snippet": "so for example we could call getline twice and it would try to use the same buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 372.59375, "title": "Getline"}, {"snippet": "i can free it", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 240.6875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "or I could have an array of characters to \"hello world\"", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 11.640625, "title": "Char Array Searching"}, {"snippet": "so for my first Link, I want to set its value to something", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 240.453125, "title": "Struct Typedef LinkedList"}, {"snippet": "for that we can use the system call open()", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 5.25, "title": "Open and Create a file"}, {"snippet": "we'll say printf() and \"Size of hello is %d\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 27.640625, "title": "Character Pointers"}, {"snippet": "so, we'll use perror()", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 398.25, "title": "Open Errors and Printf"}, {"snippet": "great so how will i get access to that in my c programs", "videoIndex": 8, "source": "0090-Environment", "startTime": 44.078125, "title": "Environment"}, {"snippet": "so let's create our new string arrays and use those", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 245.609375, "title": "Creating Links Strdup"}, {"snippet": "and the hardware is sophisticated enough to know which parts of memory are read and which parts of memory are read/write", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 332.546875, "title": "Character Pointers"}, {"snippet": "and that actually we should make copies of them", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 222.15625, "title": "Creating Links Strdup"}, {"snippet": "I could change this so that rather than changing the letters", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 305.3125, "title": "Char Array Searching"}, {"snippet": "so it's going to return a pointer to a link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 22.53125, "title": "Creating Links Strdup"}, {"snippet": "sigint or sig interrupt to the process", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 48.078125, "title": "SIGINT SIGALRM"}, {"snippet": "and secondly, there is actually one extra argument at the end and that points to the null string", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 111.265625, "title": "Program Arguments"}, {"snippet": "I will initialize it to my string \"hello\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 75.859375, "title": "Character Pointers"}, {"snippet": "perhaps you can guess the answer already", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 218.109375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so let's close standard error", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 225.53125, "title": "Open Errors and Printf"}, {"snippet": "now when i do this i am copying the pointers i'm not creating new strings", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 97.5625, "title": "Creating Links Strdup"}, {"snippet": "i am not going to try and use it", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 167.875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "let's try running our program again with 10 20 30", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 249.828125, "title": "Program Arguments"}, {"snippet": "so that's how we were able to print out hello world", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 372.453125, "title": "Char Array Searching"}, {"snippet": "so we'll run this", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 246.9375, "title": "Character Pointers"}, {"snippet": "to have NULL defined", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 147.125, "title": "Struct Typedef LinkedList"}, {"snippet": "let's talk about strings today", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 0, "title": "Char Array Searching"}, {"snippet": "our pointer is null, it's zero", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 117.8125, "title": "Program Arguments"}, {"snippet": "tell me the address of the variable", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 204.40625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "let's see if we can prove that", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 25.953125, "title": "Character Pointers"}, {"snippet": "so for example, it returns where p is", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 328.25, "title": "Char Array Searching"}, {"snippet": "and let's also increment our pointer at the end", "videoIndex": 8, "source": "0090-Environment", "startTime": 181.828125, "title": "Environment"}, {"snippet": "to be displayed", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 66.640625, "title": "Open Errors and Printf"}, {"snippet": "now there is no signed bit that is included in the bitwise representation", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 286, "title": "Not All Bytes Are 8Bits"}, {"snippet": "how many bytes do I need?", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 193.125, "title": "Struct Typedef LinkedList"}, {"snippet": "do we need to write this every time that we want to find out the number of characters in a string?", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 204.671875, "title": "Character Pointers"}, {"snippet": "well where should we send it next?", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 136.625, "title": "Struct Typedef LinkedList"}, {"snippet": "rather that the storage for this environment variable has already been made", "videoIndex": 8, "source": "0090-Environment", "startTime": 74.515625, "title": "Environment"}, {"snippet": "now i happen to know for example that the write signature looks a little something like this", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 66.875, "title": "Hello World"}, {"snippet": "that makes use of a system call", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 5.625, "title": "Hello World"}, {"snippet": "for that, we have something called sizeof", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 200.703125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "and in fact, data is going to point to  the very first four bytes", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 32.21875, "title": "Follow The Int Pointer"}, {"snippet": "I don't want to have a string, i actually want to have a character", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 300.359375, "title": "Character Pointers"}, {"snippet": "so between these two lines however", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 18.34375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and also we only want to do this if we are going to overwrite the last character which truly is a newline", "videoIndex": 17, "source": "0180-getline", "startTime": 278.0625, "title": "Getline"}, {"snippet": "so, I need some memory", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 190.59375, "title": "Struct Typedef LinkedList"}, {"snippet": "but that's not much of a linked list", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 177.0625, "title": "Struct Typedef LinkedList"}, {"snippet": "and reading from stdin is such a common occurance that in fact there's another form of this which is just say scanf", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 314.34375, "title": "Scanf Intro"}, {"snippet": "so let's look inside our buffer and where do we want to look?", "videoIndex": 17, "source": "0180-getline", "startTime": 293.484375, "title": "Getline"}, {"snippet": "and my constants, such as this \"hello\" can only be read", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 328.234375, "title": "Character Pointers"}, {"snippet": "and I'd better have a return value that returns something if I get to the very end", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 322.9375, "title": "Char Array Searching"}, {"snippet": "but for now here is what it's signature looks like", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 277.015625, "title": "Char Array Searching"}, {"snippet": "I'll have a little count variable here", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 88.34375, "title": "Character Pointers"}, {"snippet": "in fact why don't we set a couple of entries here", "videoIndex": 8, "source": "0090-Environment", "startTime": 191.03125, "title": "Environment"}, {"snippet": "and certainly we shouldn't expect anything that we've previously stored in there to be valid", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 302.3125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so, in the output, you'll see that f1 is printed twice and the second time it's because it's being called from our function eg", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 211.296875, "title": "Pointers To Automatic Variables"}, {"snippet": "we could say \"NULL\" if we wish to use NULL, actually we have to #include <stdlib.h>", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 138.1875, "title": "Struct Typedef LinkedList"}, {"snippet": "because as you know any non-zero value is treated as true", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 151.578125, "title": "Character Pointers"}, {"snippet": "so we have got a little function so far called currenttime()", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 1.84375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "So, output.txt", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 189.84375, "title": "Hello Std Err"}, {"snippet": "secondly it's a great idea to check the return value of getline to see how many characters it managed to read", "videoIndex": 17, "source": "0180-getline", "startTime": 402.59375, "title": "Getline"}, {"snippet": "it has been split into two", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 41.34375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "by making system calls", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 330.625, "title": "Hello Std Err"}, {"snippet": "we don't need to do that every time we call getline because getline by default will try to for performance try to reuse the buffer for each line it gets", "videoIndex": 17, "source": "0180-getline", "startTime": 363.5625, "title": "Getline"}, {"snippet": "so let's put a newline in here and run it again", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 131.765625, "title": "Open Errors and Printf"}, {"snippet": "okay so there's my code now to start working with a link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 273.09375, "title": "Creating Links Strdup"}, {"snippet": "Why might it be useful to have two output streams?", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 64.5625, "title": "Hello Std Err"}, {"snippet": "mode_t", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 182.109375, "title": "Open and Create a file"}, {"snippet": "Hi, welcome!", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 0, "title": "Struct Typedef LinkedList"}, {"snippet": "right and notice that the declaration here is star star asteric so it's a pointer to a pointer", "videoIndex": 17, "source": "0180-getline", "startTime": 126.875, "title": "Getline"}, {"snippet": "and then at the end we will say how many characters we found", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 112.828125, "title": "Character Pointers"}, {"snippet": "let's go and see what that is", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 178.25, "title": "Not All Bytes Are 8Bits"}, {"snippet": "and, it could be that architecture have very different numbers of bits it can read or write", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 144.3125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so that's %p", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 87.546875, "title": "Program Arguments"}, {"snippet": "so isn't that fantastic", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 71.953125, "title": "Pointers To Automatic Variables"}, {"snippet": "so let's start with our integers", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 36.859375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "we can also see that my home directory is in slash root", "videoIndex": 8, "source": "0090-Environment", "startTime": 36.296875, "title": "Environment"}, {"snippet": "so I'll have a little count. I'll start from 1 this time.", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 141.515625, "title": "Program Arguments"}, {"snippet": "I'm gonna make my program be a little bit more useful by printing out \"Hello World\" a few times", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 2.921875, "title": "Hello Std Err"}, {"snippet": "to say: \"hey, we couldn't carry on\"", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 379.328125, "title": "Open Errors and Printf"}, {"snippet": "so now i'm going to unencrypt it because i flipped the lowest bit back  ", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 193, "title": "Get Put Char"}, {"snippet": "or if we explicitly tell it to", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 127.640625, "title": "Open Errors and Printf"}, {"snippet": "what if I said", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 2.078125, "title": "Character Pointers"}, {"snippet": "And here it is! It says \"hello, hello, hello, hello\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 192.140625, "title": "Hello Std Err"}, {"snippet": "but secondly, the memory that we were using for the array is automatically free'd up", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 64.15625, "title": "Pointers To Automatic Variables"}, {"snippet": "where actually we can turn our single process into two", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 7.65625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "how can i do that", "videoIndex": 8, "source": "0090-Environment", "startTime": 156.140625, "title": "Environment"}, {"snippet": "now, our program compiles correctly of course", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 335.921875, "title": "Open Errors and Printf"}, {"snippet": "then i move on to the next character pointer", "videoIndex": 8, "source": "0090-Environment", "startTime": 147.140625, "title": "Environment"}, {"snippet": "and you'll see I've got three additional arguments", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 197.28125, "title": "Program Arguments"}, {"snippet": "first of all, the very first entry is actually the execution name of the program", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 99.625, "title": "Program Arguments"}, {"snippet": "so, sizeof int is %d and we'll have a newline as well", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 220.265625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "we can follow where that pointer points to", "videoIndex": 8, "source": "0090-Environment", "startTime": 127.65625, "title": "Environment"}, {"snippet": "in other word, we've got an expression which is a memory address, now I want to use it", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 181.65625, "title": "Follow The Int Pointer"}, {"snippet": "but we may also want to display some error messages back to the user", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 76.90625, "title": "Hello Std Err"}, {"snippet": "so, if fildes equals negative one", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 363.46875, "title": "Open Errors and Printf"}, {"snippet": "but we had four processes all printing out world", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 361.328125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "in other words, give me the size of link_t", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 198.40625, "title": "Struct Typedef LinkedList"}, {"snippet": "i am going to look at their processor id", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 54.953125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so I'd be writing an asterisk into the address of the asterisk into that occasion", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 174.1875, "title": "Char Array Searching"}, {"snippet": "but we don't actually want to continue until the child has finished", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 236.609375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and you'll see here's the function signature here", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 106.59375, "title": "Open and Create a file"}, {"snippet": "it's actually unistd.h", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 121.96875, "title": "Hello World"}, {"snippet": "we'll have a new line or two", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 89.8125, "title": "Program Arguments"}, {"snippet": "and on this machine i am root so it just keeps on printing out slash root", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 32.90625, "title": "SIGINT SIGALRM"}, {"snippet": "we could also simplify our program a little bit", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 149.328125, "title": "Character Pointers"}, {"snippet": "the int min and max is going to be %d and %d and INT_MIN and INT_MAX", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 60.046875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "if I had put some non-numbers in here, I get the result ten because the string I've got here it's converted into a zero", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 257.46875, "title": "Program Arguments"}, {"snippet": "so that's one method", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 93.46875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "we have to specifically declare ", "videoIndex": 8, "source": "0090-Environment", "startTime": 59.40625, "title": "Environment"}, {"snippet": "but it's kind of painful to keep saying \"struct Link\" every time I want to refer to this type", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 44.28125, "title": "Struct Typedef LinkedList"}, {"snippet": "and as I said before because we are working with characters it is ok to compare them so note the use of double equals here", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 233.953125, "title": "Char Array Searching"}, {"snippet": "easy just write a function", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 93.203125, "title": "SIGINT SIGALRM"}, {"snippet": "and i can say how many bytes i need", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 117.5625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "what the child now does in terms of its memory is seperate from the parents", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 97.890625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "it's certainly not a valid program because the pointer we get back from f1 now points to stale memory", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 326.203125, "title": "Pointers To Automatic Variables"}, {"snippet": "so let's actually print out some of these things", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 63.1875, "title": "Program Arguments"}, {"snippet": "the environmental variable secret is part of the environment of our running program", "videoIndex": 8, "source": "0090-Environment", "startTime": 205.109375, "title": "Environment"}, {"snippet": "so, what did we do? we opened a file descriptor and now if we look at the output of the program, you'll see we're only getting our dots printed out on standard error", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 251.515625, "title": "Open Errors and Printf"}, {"snippet": "okay so let us make something now called a fork bomb which is where we keep creating lots and lots of processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 369.5625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so in other words, my value will be zero and the link \"one\" will have a value of zero and its next pointer will have a value of zero as well", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 115.5, "title": "Struct Typedef LinkedList"}, {"snippet": "Now, why do we see \".lib\", because we said \"hey, I'm going to give you a pointer and I want you to use that pointer and take the next 6 bytes from it which is the next  six character", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 116.9375, "title": "Hello Std Err"}, {"snippet": "and it says \"Great!\" Fantastic", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 341.578125, "title": "Open and Create a file"}, {"snippet": "that the process id 681 has fork value of 682", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 130.5625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "i've got up and running", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 13.671875, "title": "Hello World"}, {"snippet": "meaning that its got a pointer that points to nothing", "videoIndex": 8, "source": "0090-Environment", "startTime": 179.625, "title": "Environment"}, {"snippet": "and the next link, its next pointer can go nowhere", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 281.453125, "title": "Struct Typedef LinkedList"}, {"snippet": "okay so let's show you what we can then do with this", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 103.6875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "wait and i printed ABCDE", "videoIndex": 17, "source": "0180-getline", "startTime": 249.765625, "title": "Getline"}, {"snippet": "perhaps it's going to be reused by some other part of the program that is about to call malloc()", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 295.125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "okay what else can we do with this", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 50.375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "Start with count equal to five, while count is greater than zero", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 13.296875, "title": "Hello Std Err"}, {"snippet": "and that's because after we return from f1, any of those automatic variables are free'd so they are no longer needed so we can reuse that space", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 142.703125, "title": "Pointers To Automatic Variables"}, {"snippet": "Well let's write something out to this file.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 229.484375, "title": "Open and Create a file"}, {"snippet": "or needed very large unknown amounts of memory", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 348.234375, "title": "Struct Typedef LinkedList"}, {"snippet": "if I print that out", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 347.0625, "title": "Char Array Searching"}, {"snippet": "which means pointer is initially pointing to h the first character", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 81.3125, "title": "Character Pointers"}, {"snippet": "hello welcome", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 0, "title": "Get Put Char"}, {"snippet": "and that is suppose we made many many many processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 326.71875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "internally, later we'll discover that a stack data structure is used to implement this", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 152.078125, "title": "Pointers To Automatic Variables"}, {"snippet": "C promises that we'll be able to store the numbers between minus 32768 and plus 32767", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 89.390625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "each case as we go deeper and deeper into recursion, our array is getting lower and lower and lower in memory", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 281.859375, "title": "Pointers To Automatic Variables"}, {"snippet": "but now let's actually make it so that it actually makes a call to find out what the current time is", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 31.34375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and we would like it to be very easy to say hey \"let's not worry about making sure my buffer is large enough\"", "videoIndex": 17, "source": "0180-getline", "startTime": 10.125, "title": "Getline"}, {"snippet": "so let's make a note of that and we'll print that out", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 164.890625, "title": "Scanf Intro"}, {"snippet": "so i am going to say waitpid and i need to say okay what is the id i need to wait on well here is the childid", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 245.828125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "but instead i want to talk about a completely different way which is to use malloc", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 95.59375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and, in fact, in our current code, you'd be right", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 197.546875, "title": "Scanf Intro"}, {"snippet": "how can we do that", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 147.046875, "title": "Get Put Char"}, {"snippet": "so, we've opened up a file descriptor who's value is three", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 197.640625, "title": "Open Errors and Printf"}, {"snippet": "then though this code might compile, okay, I can get rid of \"level\" now", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 317.46875, "title": "Pointers To Automatic Variables"}, {"snippet": "so if someone happens to have a pointer to this link and they try to use the contents straight away then it will fail it will be null", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 198.3125, "title": "Creating Links Strdup"}, {"snippet": "let's have a look at that", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 41.71875, "title": "Follow The Int Pointer"}, {"snippet": "what else do we have? how about a character?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 101.203125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so let's just make a note of that", "videoIndex": 17, "source": "0180-getline", "startTime": 97.296875, "title": "Getline"}, {"snippet": "and in this case, it's further down in the stack. it's in lower memory", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 223.578125, "title": "Pointers To Automatic Variables"}, {"snippet": "I could say hello but what's the largest value I can store inside my integer type?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 39.265625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so their bitwise pattern is just all zeros", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 112.15625, "title": "Struct Typedef LinkedList"}, {"snippet": "so we've got a little character loop here that is going to keep going until it gets to the end of the file", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 56.71875, "title": "Get Put Char"}, {"snippet": "so we'll say printf and we'll have the argv, the very first entry, the zero-th index is this", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 66.625, "title": "Program Arguments"}, {"snippet": "we actually want the address of this variable", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 123.59375, "title": "Scanf Intro"}, {"snippet": "it just changes the scoping", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 73.65625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and in this case the correct type is something that doesn't return anything", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 94.40625, "title": "SIGINT SIGALRM"}, {"snippet": "this time when we run it", "videoIndex": 8, "source": "0090-Environment", "startTime": 203.078125, "title": "Environment"}, {"snippet": "and then i need to give it a file descriptor", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 25.390625, "title": "Hello World"}, {"snippet": "called argv for value", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 59.9375, "title": "Program Arguments"}, {"snippet": "so initially i have two processes", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 421.9375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "which can parse data inside a string", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 18.5, "title": "Scanf Intro"}, {"snippet": "and fork will stop working", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 445.84375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "let's have a look at that file", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 327.03125, "title": "Open and Create a file"}, {"snippet": "it is essentially an integer but it is wrapped up in this type here called mode", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 173.953125, "title": "Open and Create a file"}, {"snippet": "and, when we run it, we see that both f1 and f2 both these functions the array is actually stored inside the same memory location", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 126.71875, "title": "Pointers To Automatic Variables"}, {"snippet": "so what we're going to do is make use of a system call called write", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 18.109375, "title": "Hello World"}, {"snippet": "And they're called 1 and 2.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 61.8125, "title": "Hello Std Err"}, {"snippet": "right so let's do that", "videoIndex": 17, "source": "0180-getline", "startTime": 356.671875, "title": "Getline"}, {"snippet": "but hopefully, it also secretly created another file", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 323.640625, "title": "Open and Create a file"}, {"snippet": "so free(ptr1) and free(ptr2)", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 329.890625, "title": "Struct Typedef LinkedList"}, {"snippet": "if it is zero however then hey I'm the carefree child!", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 195.625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "now I've got something which can get rid of swear words by over writing them with asterisks or perhaps a password or something", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 212.375, "title": "Char Array Searching"}, {"snippet": "so the first think we can do is call time so when you call time you can pass it a pointer to a time_t variable", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 61.6875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "one mistake we can make is to double free the same pointer", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 247.71875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so let's put that in a loop", "videoIndex": 8, "source": "0090-Environment", "startTime": 154.21875, "title": "Environment"}, {"snippet": "i cheated i said look just give me some space for the lifetime of my program here ", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 61.265625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so you see that we can now send our arguments", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 210.140625, "title": "Program Arguments"}, {"snippet": "and it takes another integer which is the number of characters to write", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 79.578125, "title": "Hello World"}, {"snippet": "i am just going to stop", "videoIndex": 8, "source": "0090-Environment", "startTime": 301.1875, "title": "Environment"}, {"snippet": "and I need to set its \"next\" pointer to something", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 246, "title": "Struct Typedef LinkedList"}, {"snippet": "so the correct way to do this is to keep a pointer around", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 230.59375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so that gives me a pointer to a link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 173.328125, "title": "Struct Typedef LinkedList"}, {"snippet": "okay so let's tell the preprocessor to read in the contents of the file", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 125.578125, "title": "Hello World"}, {"snippet": "so you're going to come across malloc calloc and realloc", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 101.546875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so C does not specify a precise number of bits required for, say, and integer", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 12.96875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "let's look at the contents of that file", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 339.140625, "title": "Open and Create a file"}, {"snippet": "well if we read one character that would be at the beginning of the buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 297.8125, "title": "Getline"}, {"snippet": "so we actually need to set these to explicitly to null and the capacity to zero", "videoIndex": 17, "source": "0180-getline", "startTime": 192.609375, "title": "Getline"}, {"snippet": "let's run this", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 402.484375, "title": "Open Errors and Printf"}, {"snippet": "that doesn't change the lifetime of the variable", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 71.671875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "we'll do this on our array so we can actually make modifications to it", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 87.65625, "title": "Char Array Searching"}, {"snippet": "i can also put this inside the function", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 68.921875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "now I'm going to change my method signature", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 319.109375, "title": "Char Array Searching"}, {"snippet": "so what about strings in c?", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 0, "title": "Character Pointers"}, {"snippet": "so i'll say malloc give me some memory and how much well i better ask for how big is my memory structure link_t", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 61.0625, "title": "Creating Links Strdup"}, {"snippet": "for example if I try to get an environmental variable that doesn't exist", "videoIndex": 8, "source": "0090-Environment", "startTime": 263.640625, "title": "Environment"}, {"snippet": "so these can be used by the shell and any other programs that we start to help configure their behavior", "videoIndex": 8, "source": "0090-Environment", "startTime": 22.4375, "title": "Environment"}, {"snippet": "let's find out what these are", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 56.75, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so in this case, it should be nineteen", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 213.6875, "title": "Scanf Intro"}, {"snippet": "it is possible that malloc fails", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 142.34375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "but now i am going to press control c", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 124.203125, "title": "SIGINT SIGALRM"}, {"snippet": "which looks like a key or a name followed by an equal sign followed by its value", "videoIndex": 8, "source": "0090-Environment", "startTime": 138.625, "title": "Environment"}, {"snippet": "I'll say \"Angrave one hundred\"", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 340.609375, "title": "Scanf Intro"}, {"snippet": "and we'll say that with our file we want to be fairly private and only the owner of the file can access it", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 183.375, "title": "Open and Create a file"}, {"snippet": "we'll run into an error which is: we haven't defined what this mode_t is", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 283.609375, "title": "Open and Create a file"}, {"snippet": "isn't that fantastic. we didn't need any additional memory", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 140.25, "title": "Pointers To Automatic Variables"}, {"snippet": "and that is equivalent to printf by saying %s and \\n at the end", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 220.640625, "title": "Get Put Char"}, {"snippet": "so the last ABC that I wrote in there actually overran my buffer", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 351.90625, "title": "Get Put Char"}, {"snippet": "right so we could start calling this and we could say okay", "videoIndex": 17, "source": "0180-getline", "startTime": 115.921875, "title": "Getline"}, {"snippet": "so we'll add those up and we'll print the result. right so we've got a result of zero", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 243.15625, "title": "Program Arguments"}, {"snippet": "also, when writing scanf or sscanf or fscanf, it's always a good idea to carefully check to see whether you should be looking at the address of the variable or if the variable itself actually is a pointer", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 264.1875, "title": "Scanf Intro"}, {"snippet": "but because its got its own address space", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 93.9375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "write() doesn't give us that fuctionality", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 4.90625, "title": "Open Errors and Printf"}, {"snippet": "for that I have to introduce some new syntax, which is the &", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 191.953125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "that's not what we need", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 122.484375, "title": "Scanf Intro"}, {"snippet": "so it points to the first entry in this array ", "videoIndex": 8, "source": "0090-Environment", "startTime": 129.265625, "title": "Environment"}, {"snippet": "I can now make my first link ptr1 its next point to next ptr", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 275.0625, "title": "Struct Typedef LinkedList"}, {"snippet": "let's call say fork a couple of times and perhaps you can guess how many worlds we'll see here", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 335.34375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "it will be used in a moment for other function calls", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 338.734375, "title": "Pointers To Automatic Variables"}, {"snippet": "so good defensive programs must check that the return value is reasonable", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 258.078125, "title": "Scanf Intro"}, {"snippet": "we could have made it of course print out each one of those letters", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 145.328125, "title": "Character Pointers"}, {"snippet": "so let's do that", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 70.203125, "title": "Character Pointers"}, {"snippet": "so if I type ls /bin", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 7.171875, "title": "Program Arguments"}, {"snippet": "and once that's going we'll see that whoops", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 47.25, "title": "Hello World"}, {"snippet": "so, my link called \"one\" and my value live forever", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 104.5625, "title": "Struct Typedef LinkedList"}, {"snippet": "they also come with a big warning sticker and that's this", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 78.78125, "title": "Pointers To Automatic Variables"}, {"snippet": "I've commented them up here", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 59.890625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so that is the first thing", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 164.53125, "title": "Open and Create a file"}, {"snippet": "we are going to take that temporary result and put it into some memory that is ours to control", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 167.390625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "but now it's time for you to play with malloc ", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 268.875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "because each character is exactly one byte", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 193.625, "title": "Character Pointers"}, {"snippet": "it takes um, it's called write ", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 70.984375, "title": "Hello World"}, {"snippet": "rather than me having to manually write the declaration in here", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 111.921875, "title": "Hello World"}, {"snippet": "when we say \"buffer\" yes that gives us the beginning address of our array", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 110.96875, "title": "Scanf Intro"}, {"snippet": "so I'm going to move that line down to here", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 241.75, "title": "Open Errors and Printf"}, {"snippet": "so I've got %c %d and %c for character integer and hexadecimal value", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 83.34375, "title": "Get Put Char"}, {"snippet": "so it's complaining that my file name is bad", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 428.859375, "title": "Open Errors and Printf"}, {"snippet": "so here is two options", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 36.875, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so how can i do that", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 225.09375, "title": "Creating Links Strdup"}, {"snippet": "and we'll print it out and you see that size of hello is 6", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 44.546875, "title": "Character Pointers"}, {"snippet": "it can be reused for other purposes in a moment by the rest of the program", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 68.84375, "title": "Pointers To Automatic Variables"}, {"snippet": "so it's very very common to read in a single line of text either from the user or from a file", "videoIndex": 17, "source": "0180-getline", "startTime": 3.25, "title": "Getline"}, {"snippet": "alright so scanf is going to look at our memory starting at wherever our data is pointing at", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 70.234375, "title": "Scanf Intro"}, {"snippet": "so it's just changing how the actual name of the variable is bound to the memory", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 87.5, "title": "Time For Mallocing Heap Memory"}, {"snippet": "except we've got a problem here", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 179.984375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "that's a pretty aggressive alarm clock i think you'll agree", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 199.265625, "title": "SIGINT SIGALRM"}, {"snippet": "so if I had a very long name with no spaces here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 200.203125, "title": "Scanf Intro"}, {"snippet": "so this is going to give me a pointer to the very first byte", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 129.375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "let's print it out and quit", "videoIndex": 8, "source": "0090-Environment", "startTime": 237, "title": "Environment"}, {"snippet": "let's do a couple of things here", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 89.984375, "title": "Pointers To Automatic Variables"}, {"snippet": "C also provides the idea of being able to say that we can have an unsigned version", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 274.921875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "how is this represented? well clearly it's made up of characters", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 4.921875, "title": "Character Pointers"}, {"snippet": "to that very first link", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 307.359375, "title": "Creating Links Strdup"}, {"snippet": "instead i want to say whilst the thing that pointer is looking at is a non null value", "videoIndex": 8, "source": "0090-Environment", "startTime": 164.90625, "title": "Environment"}, {"snippet": "alright, and change that argc", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 91.953125, "title": "Program Arguments"}, {"snippet": "that memory is no longer ours to control", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 336.09375, "title": "Pointers To Automatic Variables"}, {"snippet": "so in my shell over here", "videoIndex": 8, "source": "0090-Environment", "startTime": 14.34375, "title": "Environment"}, {"snippet": "and destroying the link is also relatively simple", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 143.5625, "title": "Creating Links Strdup"}, {"snippet": "we don't have to but quite often we need the child process to do something for us", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 227.984375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so what if I wanted to know the actual number of bytes in different types?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 196.8125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "right so i need to get some memory", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 51.46875, "title": "Creating Links Strdup"}, {"snippet": "and i will call that say result and i need to initialize my pointer", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 82.1875, "title": "Creating Links Strdup"}, {"snippet": "so signals are like a software interrupt", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 5.640625, "title": "SIGINT SIGALRM"}, {"snippet": "in the next video, we will talk about pointers", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 312.453125, "title": "Not All Bytes Are 8Bits"}, {"snippet": "in other words whilst i have a valid pointer", "videoIndex": 8, "source": "0090-Environment", "startTime": 169.96875, "title": "Environment"}, {"snippet": "finally, to reinforce this idea, let's make a little recursive function", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 244.4375, "title": "Pointers To Automatic Variables"}, {"snippet": "alright and i want to say when i open it that i am going to open it for say reading and writing", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 151.78125, "title": "Open and Create a file"}, {"snippet": "you are going to need a pointer to a buffer and a capacity variacle which getline itself is going to change the contents of", "videoIndex": 17, "source": "0180-getline", "startTime": 383.546875, "title": "Getline"}, {"snippet": "first of all fork actually returns something here", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 108.875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and as each integer takes four bytes, that's why our address is going up by four each time", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 122.96875, "title": "Follow The Int Pointer"}, {"snippet": "so that's what the extern keyword means", "videoIndex": 8, "source": "0090-Environment", "startTime": 69.5, "title": "Environment"}, {"snippet": "so I've got four bytes and then four bytes and then four bytes and then four bytes and so on", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 36, "title": "Follow The Int Pointer"}, {"snippet": "let's try that and see what happens", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 305.421875, "title": "Character Pointers"}, {"snippet": "to say \"look, here's a pointer to some memory and please take so many bytes from that memory and send it out to a file\"", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 12.125, "title": "Open Errors and Printf"}, {"snippet": "i'm talking about gets so let's call gets and we will have a little buffer here", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 251.046875, "title": "Get Put Char"}, {"snippet": "we'll flip the lowest bit", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 146.0625, "title": "Get Put Char"}, {"snippet": "great so we can run this and get a look at all of the entries", "videoIndex": 8, "source": "0090-Environment", "startTime": 184.53125, "title": "Environment"}, {"snippet": "or at least almost like me", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 87.734375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "is inside stdio.h", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 98.3125, "title": "Open Errors and Printf"}, {"snippet": "that do this for us", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 36.453125, "title": "Open Errors and Printf"}, {"snippet": "we can display it as a character an integer and hexdecimal values", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 77.828125, "title": "Get Put Char"}, {"snippet": "so now I've got a very strange character because it's taken the lowest eight bits and copied that into my character", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 198.546875, "title": "Char Array Searching"}, {"snippet": "so if that's the case then my code is relatively simple like this", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 140.1875, "title": "Creating Links Strdup"}, {"snippet": "so now I've got my link type, I can make a link", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 85.046875, "title": "Struct Typedef LinkedList"}, {"snippet": "be careful you don't put an asterisk here otherwise, you'll only be reserving enough bytes for a pointer", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 200.671875, "title": "Struct Typedef LinkedList"}, {"snippet": "so let's pass in the array and afterwards we'll print what the array is so that's %s", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 99.265625, "title": "Char Array Searching"}, {"snippet": "perhaps we don't want our alarm signal to be so menacing", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 205.703125, "title": "SIGINT SIGALRM"}, {"snippet": "now what we should do is evaluate our strlen() before we change our pointer", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 265.21875, "title": "Character Pointers"}, {"snippet": "so we'll stop and let's now change it so that very secret is something like abc", "videoIndex": 8, "source": "0090-Environment", "startTime": 305.8125, "title": "Environment"}, {"snippet": "well, here's a surprising thing, a character is one byte", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 104.046875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so, for example, I can have an unsigned int", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 281.984375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "there are many others", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 154.515625, "title": "SIGINT SIGALRM"}, {"snippet": "so here's a little problem i've got so far", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 5.5, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so i could just say while getchar is not equal to a special constant called end of file (EOF) keep going around in a loop", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 15.15625, "title": "Get Put Char"}, {"snippet": "and we'll say argv of zero", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 76.03125, "title": "Program Arguments"}, {"snippet": "and echo simply to echo back whatever we type", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 23.6875, "title": "Program Arguments"}, {"snippet": "and we see we've got a value here in memory", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 63.90625, "title": "Follow The Int Pointer"}, {"snippet": "so automatic variables are very easy to use", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 76.5625, "title": "Pointers To Automatic Variables"}, {"snippet": "we need the size of our whole struct", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 209.75, "title": "Struct Typedef LinkedList"}, {"snippet": "and let's say \"while the pointer the value is not equal to 0\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 90.890625, "title": "Character Pointers"}, {"snippet": "and when we ran it we got hello", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 106.515625, "title": "Hello World"}, {"snippet": "well let's just run it and see what happens to begin with", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 180.46875, "title": "SIGINT SIGALRM"}, {"snippet": "so let's run this little program", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 65.609375, "title": "Get Put Char"}, {"snippet": "I don't want to do append()", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 123.265625, "title": "Open and Create a file"}, {"snippet": "or, possibly, another device", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 20.390625, "title": "Open Errors and Printf"}, {"snippet": "we can also parse data from a file stream and how can we do that? well you can use not sscanf but fscanf", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 288.9375, "title": "Scanf Intro"}, {"snippet": "so we better tell it where to exactly put these things", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 99.890625, "title": "Scanf Intro"}, {"snippet": "but that's not right because the asterisk means I've given the address of the asterisk", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 166.765625, "title": "Char Array Searching"}, {"snippet": "that is the declaration that we are going to be using", "videoIndex": 17, "source": "0180-getline", "startTime": 98.875, "title": "Getline"}, {"snippet": "to say hey this memory is no longer being used", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 242.625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "but hold on a moment", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 109.15625, "title": "Scanf Intro"}, {"snippet": "let me print that out after we've called gets i'm going to print it again", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 311.71875, "title": "Get Put Char"}, {"snippet": "this can lead to all sorts of horrendous problems because when you tell the heap that you've freed with some memory it might actually use that memory for it's own book keeping", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 254.359375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "for example, I could write a little program that helps me add up some numbers", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 213.28125, "title": "Program Arguments"}, {"snippet": "so let's talk more about that file descriptor", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 0, "title": "Hello Std Err"}, {"snippet": "okay so this time the child process got to print out I'm the carefree child", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 297.140625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and one.next equals well, where should we put it?", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 132.890625, "title": "Struct Typedef LinkedList"}, {"snippet": "for example it's thinking of something to say or it's going to write to a file", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 72.46875, "title": "Hello Std Err"}, {"snippet": "alright so let's do a little better then that though", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 108.140625, "title": "Hello World"}, {"snippet": "in addition to the next pointer", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 9.9375, "title": "Creating Links Strdup"}, {"snippet": "because we don't want to print out the program name", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 145.078125, "title": "Program Arguments"}, {"snippet": "So we just got whatever happened to be in memory after our dot. So, we only wanted to do the dot", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 130.8125, "title": "Hello Std Err"}, {"snippet": "then my pointer is actually going to be nil", "videoIndex": 8, "source": "0090-Environment", "startTime": 270.9375, "title": "Environment"}, {"snippet": "or if we finish a line", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 129.28125, "title": "Open Errors and Printf"}, {"snippet": "so let's store that inside my little character pointer here", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 133.234375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and what should we have inside this?", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 24.53125, "title": "Struct Typedef LinkedList"}, {"snippet": "we get hello world world", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 29.609375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "i am going to call fork", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 21.46875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "bye", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 176.59375, "title": "Hello World"}, {"snippet": "and later on i can ask for some status information about my child", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 254.703125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so let's use printf for that", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 81.84375, "title": "Get Put Char"}, {"snippet": "so let me ctrl-c that to break it", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 187.9375, "title": "Char Array Searching"}, {"snippet": "so now when we run it, we'll see that sscanf managed to read both iterms", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 177.40625, "title": "Scanf Intro"}, {"snippet": "we could actually do some defensive programming here", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 165.84375, "title": "Creating Links Strdup"}, {"snippet": "so one problem with ctime() is that it uses static storage", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 141.203125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "to mean that I'm not pointing to anything anymore", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 327.015625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so just for fun lets change our program as well before we increment the pointer to print out the next characters", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 163.921875, "title": "Character Pointers"}, {"snippet": "how might I make an array of integers?", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 3.53125, "title": "Follow The Int Pointer"}, {"snippet": "if it returns a positive number is talking to the parent", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 152.734375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and this often happens by accident by people who are new to systems programming", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 378.1875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "alright our program right now is allocating memory on the heap", "videoIndex": 17, "source": "0180-getline", "startTime": 344.71875, "title": "Getline"}, {"snippet": "so let's have a pointer down here", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 233.609375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "alright, that's enough from me. now it's time for you to play. bye!", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 270.328125, "title": "Program Arguments"}, {"snippet": "so we are going to have to say something about the mode flags ", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 53.421875, "title": "Open and Create a file"}, {"snippet": "Our terminal can actually control where the output goes", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 156.984375, "title": "Hello Std Err"}, {"snippet": "so the open call takes 2 or 3 arguments. the second argument will be exactly what we want to do", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 25.234375, "title": "Open and Create a file"}, {"snippet": "as you call it it can make the buffer as large as", "videoIndex": 17, "source": "0180-getline", "startTime": 390.921875, "title": "Getline"}, {"snippet": "So, now it's your turn. Have fun playing! Bye.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 333.15625, "title": "Hello Std Err"}, {"snippet": "that's it for me. time for you to play, bye!", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 345.578125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and we see we get a result of 60", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 254.234375, "title": "Program Arguments"}, {"snippet": "so just for fun, let's actually close one of the existing file descriptors before we do the open()", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 216.953125, "title": "Open Errors and Printf"}, {"snippet": "so for example if i were to just say okay i've got myself a static array out here outside of that method", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 44.265625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "instead let's change that to the actual bitwise pattern of my character", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 207.25, "title": "Char Array Searching"}, {"snippet": "but not for score", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 116.8125, "title": "Scanf Intro"}, {"snippet": "great so that read that correctly", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 154.984375, "title": "Scanf Intro"}, {"snippet": "a very wide range of numbers", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 87.25, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so don't forget for every malloc you do, we should responsible for freeing up that memory once and once only", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 321.015625, "title": "Struct Typedef LinkedList"}, {"snippet": "and a little int to say how big is our buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 71.921875, "title": "Getline"}, {"snippet": "surely we mean 8 bits? no.", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 109.390625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "each time you call getline it might change that buffer to point to some new memory if the buffer needs to be larger", "videoIndex": 17, "source": "0180-getline", "startTime": 395.703125, "title": "Getline"}, {"snippet": "desperately trying to make the system stable again", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 453.21875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "but just for fun because i am just doing this inside a browser it doesn't matter if i bring my little virtual machine to a halt", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 383.3125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so here's my array and I can initialize it to, say, \"f1f1\" here we go", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 39.609375, "title": "Pointers To Automatic Variables"}, {"snippet": "let's write our first c program", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 3.984375, "title": "Hello World"}, {"snippet": "The second one is reserved for error messages.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 92.71875, "title": "Hello Std Err"}, {"snippet": "So, for example, I might say, I want to take the standard output and put that into a file.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 161.015625, "title": "Hello Std Err"}, {"snippet": "alright so uh that's my program working", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 160.78125, "title": "Hello World"}, {"snippet": "for example in my little program the integer is immediately after the buffer", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 299.15625, "title": "Get Put Char"}, {"snippet": "in seven seconds", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 177.375, "title": "SIGINT SIGALRM"}, {"snippet": "and if level is greater than zero, let's call ourselves again with a slightly reduced value", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 257.5625, "title": "Pointers To Automatic Variables"}, {"snippet": "on this architecture, a character is 8 bits", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 189.5, "title": "Not All Bytes Are 8Bits"}, {"snippet": "today let's talk about malloc ", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 112.5625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "and we'll print it out", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 117.3125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so now, let's run our program here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 328.265625, "title": "Scanf Intro"}, {"snippet": "well yes it could because if we go past twelve bytes we start writing into memory which is used for other purposes", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 293.609375, "title": "Get Put Char"}, {"snippet": "For example, I might have a file name called \"output.txt\"", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 19.015625, "title": "Open and Create a file"}, {"snippet": "so if I want to I can then take that output and pipe it into my program again", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 186.03125, "title": "Get Put Char"}, {"snippet": "so in addition to being able to set arguments to our little programs", "videoIndex": 8, "source": "0090-Environment", "startTime": 4.09375, "title": "Environment"}, {"snippet": "so we could say start define things to say have a constant here, I'll call it say \"STDOUT_FILENO 1\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 205.296875, "title": "Hello Std Err"}, {"snippet": "so why this distinction?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 128.671875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "that we actually really got the bytes", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 340.90625, "title": "Struct Typedef LinkedList"}, {"snippet": "then we don't try to use that null pointer", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 28.078125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "more complicated links might have a previous pointer as well", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 291.59375, "title": "Struct Typedef LinkedList"}, {"snippet": "their sizes is very different, plus remember that because we've made additional memory on the stack", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 71.90625, "title": "Char Array Searching"}, {"snippet": "if i type for example set", "videoIndex": 8, "source": "0090-Environment", "startTime": 17.71875, "title": "Environment"}, {"snippet": "so before ending here I should free up those pointers", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 257.640625, "title": "Creating Links Strdup"}, {"snippet": "so, we should check that", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 342.28125, "title": "Open Errors and Printf"}, {"snippet": "a new character array that has been created on the heap", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 237.4375, "title": "Creating Links Strdup"}, {"snippet": "and i'll say there is my result", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 137.859375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "I got result two", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 183.4375, "title": "Scanf Intro"}, {"snippet": "the current time is known by the system", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 39.8125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "then i am the parent", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 183.546875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "we get getline to manipulate these directly ", "videoIndex": 17, "source": "0180-getline", "startTime": 62.390625, "title": "Getline"}, {"snippet": "let's run this and see what we get", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 279.84375, "title": "Open and Create a file"}, {"snippet": "a character is %d bytes", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 175.140625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "it means at least 8 bits", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 124.15625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "that now our pointer is no longer pointing to invalid memory", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 337.09375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "which means give me the exit value (or the exit status) of the last command run.", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 293.4375, "title": "Hello Std Err"}, {"snippet": "well, we better check out file output.text", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 264.828125, "title": "Open Errors and Printf"}, {"snippet": "So now, if I run this before the program starts, I'm going to redirect it's output into this new file", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 168.84375, "title": "Hello Std Err"}, {"snippet": "and in fact, it's going to be thirty two bytes on the stack", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 18, "title": "Follow The Int Pointer"}, {"snippet": "and include all the text that is in that file", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 132.359375, "title": "Hello World"}, {"snippet": "in fact i have got a parent child relationship here", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 71.828125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "i already know that i cannot make an array in here to hold the result", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 18.9375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "let's include \"O_CREAT\" here. I'm going to say \"O_CREAT\" which is a constant and I'm going to bitwise OR it with the flag to say \"truncate\" so let's look that up as well", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 131.296875, "title": "Open and Create a file"}, {"snippet": "we just know that it's going to do all that buffer maintenance for us automatically", "videoIndex": 17, "source": "0180-getline", "startTime": 169.21875, "title": "Getline"}, {"snippet": "i will put this in a little loop that says while one let's fork", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 404.125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "each time around the loop we're going to decrement 'count'", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 17.625, "title": "Hello Std Err"}, {"snippet": "which means take my address pointer add two to it and use that address for the array", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 208.453125, "title": "Follow The Int Pointer"}, {"snippet": "so let's remove that and say while star pointer", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 156.953125, "title": "Character Pointers"}, {"snippet": "then the lifetime of my array (this variable) is only for the lifetime of the function", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 47.90625, "title": "Pointers To Automatic Variables"}, {"snippet": "go in and find a file named unistd.h", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 129.53125, "title": "Hello World"}, {"snippet": "it prints back ABCD", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 71.203125, "title": "Get Put Char"}, {"snippet": "so how could I use this?", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 130.546875, "title": "Follow The Int Pointer"}, {"snippet": "now you might be worried that scanf could result in a buffer overflow", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 193.046875, "title": "Scanf Intro"}, {"snippet": "so what we should do is let our programs is with every malloc we should at some point free up that memory to say hey i've finished with it", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 220.5625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so h e l l o", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 37.46875, "title": "Hello World"}, {"snippet": "We will write a little message \"Great!\" and a newline", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 236.90625, "title": "Open and Create a file"}, {"snippet": "let's add one to data and print that out", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 73.015625, "title": "Follow The Int Pointer"}, {"snippet": "oops i better call it secret", "videoIndex": 8, "source": "0090-Environment", "startTime": 234.03125, "title": "Environment"}, {"snippet": "I'm sorry, we'll close standard out", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 229.234375, "title": "Open Errors and Printf"}, {"snippet": "And I'll say define STDERRFILENO 2", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 216.375, "title": "Hello Std Err"}, {"snippet": "right so let's run our program again", "videoIndex": 17, "source": "0180-getline", "startTime": 327.40625, "title": "Getline"}, {"snippet": "so let me have my link pointer here and I can call it root", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 297.25, "title": "Creating Links Strdup"}, {"snippet": "so what we'll do is say if c is at least thirty two in other words at least a space an ascii space", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 132.6875, "title": "Get Put Char"}, {"snippet": "and finally it's good practice to don't forget to free the memory that is pointed at by your buffer variable", "videoIndex": 17, "source": "0180-getline", "startTime": 419.5, "title": "Getline"}, {"snippet": "okay great and of course i could make my program print out hello world and do it on two different lines", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 149, "title": "Hello World"}, {"snippet": "and for now the last argument i am just going to put as 0", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 260.125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "actually the last character might be a newline character", "videoIndex": 17, "source": "0180-getline", "startTime": 251.390625, "title": "Getline"}, {"snippet": "so we'll print this out", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 55.46875, "title": "Follow The Int Pointer"}, {"snippet": "and a little integer here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 43.859375, "title": "Scanf Intro"}, {"snippet": "and, in fact, our score variable still contained its original value", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 251.328125, "title": "Scanf Intro"}, {"snippet": "including ls for list the contents of a directory (what we just did)", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 16.5, "title": "Program Arguments"}, {"snippet": "and we'll have a little expression here to say what is the sizeof() \"hello\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 34.234375, "title": "Character Pointers"}, {"snippet": "\"hello\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 3.65625, "title": "Character Pointers"}, {"snippet": "perhaps you can figure out why", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 234.6875, "title": "Character Pointers"}, {"snippet": "cat to list the contents of a file and print it out", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 20.328125, "title": "Program Arguments"}, {"snippet": "so that's something to confuse your non-C friends with", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 235.78125, "title": "Follow The Int Pointer"}, {"snippet": "why? because by the time my loop finished I'd advanced that pointer on until it had reached that null byte", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 255.71875, "title": "Character Pointers"}, {"snippet": "but for this demo let's just use ctime() which has some reasonable formatting that most people can understand", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 110.671875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "now I actually want to use that pattern that bitwise pattern to actually read or write some memory", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 186.234375, "title": "Follow The Int Pointer"}, {"snippet": "i could make my array static", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 38.5, "title": "Time For Mallocing Heap Memory"}, {"snippet": "here is my child", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 165.484375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "fantastic. so that's useful. now we can write robust programs to check if we really did write into both variables", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 184.875, "title": "Scanf Intro"}, {"snippet": "so I could say \"Hello terminal value of this dollar question mark.\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 288.59375, "title": "Hello Std Err"}, {"snippet": "so when we passed that to strlen() it immediately found the null byte", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 261.921875, "title": "Character Pointers"}, {"snippet": "we are going to have a pointer to a buffer", "videoIndex": 17, "source": "0180-getline", "startTime": 66.90625, "title": "Getline"}, {"snippet": "so, if I say printf data is at and this time do %p, that means treat data as and print it out as an address", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 43.5625, "title": "Follow The Int Pointer"}, {"snippet": "if I had two links, let's do that", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 261.09375, "title": "Struct Typedef LinkedList"}, {"snippet": "so we get back our source code", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 197.078125, "title": "Get Put Char"}, {"snippet": "so the last point we'll make, which is the most important, which is that it's very dangerous to return pointers to memory that is no longer valid", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 299.734375, "title": "Pointers To Automatic Variables"}, {"snippet": "so for example, I have a variable 'count' here and a little for-loop", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 8.03125, "title": "Hello Std Err"}, {"snippet": "so i will call getpid()", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 63.125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "if we didn't want to use that, then we could open up a file using fopen and then pass in the file handle here", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 305.5, "title": "Scanf Intro"}, {"snippet": "that will ensure as well that all of the bytes that we send to the file stream have been saved", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 261.28125, "title": "Open and Create a file"}, {"snippet": "and so the first link I make I can initialize root to that", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 302.390625, "title": "Creating Links Strdup"}, {"snippet": "why don't we catch that signal and install our own little handle for that", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 55.3125, "title": "SIGINT SIGALRM"}, {"snippet": "so we will let's remove this ", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 209.796875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "okay so here is what we see", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 127.9375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "the parent", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 78.40625, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so let's run this", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 290.96875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so let's just use the result", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 80.953125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "so this time i am going to say alarm seven seconds", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 159.75, "title": "SIGINT SIGALRM"}, {"snippet": "alright that is enough for me", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 260.921875, "title": "SIGINT SIGALRM"}, {"snippet": "and compilers even occasionally provide their own custom types as well", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 261.46875, "title": "Not All Bytes Are 8Bits"}, {"snippet": "so for example, I could have a function called eg", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 169.453125, "title": "Pointers To Automatic Variables"}, {"snippet": "for that, we will use a struct", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 12.6875, "title": "Struct Typedef LinkedList"}, {"snippet": "so we have all of these arrays created. all of these different activation records in different places", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 291.0625, "title": "Pointers To Automatic Variables"}, {"snippet": "and is telling the parent here is the id number for your child", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 156.484375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and, run it again", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 310.640625, "title": "Open and Create a file"}, {"snippet": "that's not enough for what we need", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 208.09375, "title": "Struct Typedef LinkedList"}, {"snippet": "so let me typing something", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 338.546875, "title": "Scanf Intro"}, {"snippet": "okay so now we have a little program where the parent and child are going to do two different things", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 215.125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "okay that's it for me thanks for watching and i'll see you in another video. bye!", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 378.46875, "title": "Get Put Char"}, {"snippet": "Hi, so C is designed to be a portable language in a sense that we could write a C compiler for many many different hardware architectures", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 0, "title": "Not All Bytes Are 8Bits"}, {"snippet": "let's prove this let's set our hex value of c to be ten twenty thirty fourty", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 305.09375, "title": "Get Put Char"}, {"snippet": "the program code, the actual assembly, the actual instructions for the cpu, can only be read", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 321.671875, "title": "Character Pointers"}, {"snippet": "see you in the next video after you've said hello to the world", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 172.578125, "title": "Hello World"}, {"snippet": "well, on this particular architecture we just found out that an integer is four bytes", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 10.15625, "title": "Follow The Int Pointer"}, {"snippet": "and you can see great we've garbled the program", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 181.875, "title": "Get Put Char"}, {"snippet": "and getline is going to modify those two variables directly", "videoIndex": 17, "source": "0180-getline", "startTime": 149.34375, "title": "Getline"}, {"snippet": "so the last thing we'll do today is let's capture that and quit if we get a bad error", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 358.125, "title": "Open Errors and Printf"}, {"snippet": "so we could declare it", "videoIndex": 0, "source": "0010-HelloWorld-v2", "startTime": 65.140625, "title": "Hello World"}, {"snippet": "and i get the next entry", "videoIndex": 8, "source": "0090-Environment", "startTime": 150.234375, "title": "Environment"}, {"snippet": "in this case, negative forty two", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 120.515625, "title": "Scanf Intro"}, {"snippet": "okay so we'll run this", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 153.078125, "title": "Get Put Char"}, {"snippet": "so let's have a little variable called result", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 67.8125, "title": "Open Errors and Printf"}, {"snippet": "if I run this I get a few warnings", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 181.765625, "title": "Char Array Searching"}, {"snippet": "how is it that these programs then can find out the parameters (the arguments) that we supply?", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 36.59375, "title": "Program Arguments"}, {"snippet": "I'm just going to give it a bad file name", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 332.234375, "title": "Open Errors and Printf"}, {"snippet": "so, let's now actually print out the other values", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 121.96875, "title": "Program Arguments"}, {"snippet": "so that's getchar and putchar i can also work with whole lines", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 199.1875, "title": "Get Put Char"}, {"snippet": "to send its buffer out to standard out", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 151.328125, "title": "Open Errors and Printf"}, {"snippet": "so, we'll see more about the stack in a moment", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 236.75, "title": "Pointers To Automatic Variables"}, {"snippet": "I've got another problem here which is that change is implicitly declared", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 255.34375, "title": "Char Array Searching"}, {"snippet": "if I had put that inside double quotes then the hat and sat would be one argument", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 201.28125, "title": "Program Arguments"}, {"snippet": "so let's make a note of that", "videoIndex": 17, "source": "0180-getline", "startTime": 216.96875, "title": "Getline"}, {"snippet": "Okay so, we've covered quite a bit of ground. We've talked about how in C, any non-zero integer is considered \"true\"", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 301.3125, "title": "Hello Std Err"}, {"snippet": "but i am going to do just a few more I'll do ABCD there we go", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 340.796875, "title": "Get Put Char"}, {"snippet": "run it again but this time but this time have \"cat hat sat\"", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 192.921875, "title": "Program Arguments"}, {"snippet": "for that there's a function called ctime, this a library function. there are other functions that give greater control to the precise formatting", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 100.796875, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "i can let's get rid of the loop here i can say puts hello or any pointer to a character array provided its terminated by a zero byte at the end", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 205.03125, "title": "Get Put Char"}, {"snippet": "and we better install then", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 178.6875, "title": "SIGINT SIGALRM"}, {"snippet": "I can even use it with integers", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 64.875, "title": "Struct Typedef LinkedList"}, {"snippet": "so the fork value is different for the parent and the child", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 145.4375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "and if you did that, you better give it a file stream", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 299.328125, "title": "Scanf Intro"}, {"snippet": "in the next video i'll talk about some of the mistakes that we can make with heap allocation", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 263.625, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so let's look at the sizes of each of these, perhaps you can guess what the result is going to be", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 29.671875, "title": "Char Array Searching"}, {"snippet": "a zero value or null character to say \"hey this is the end of the string\"", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 16.84375, "title": "Character Pointers"}, {"snippet": "then we'll close this file descriptor meaning we don't want to use this descriptor anymore", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 254.4375, "title": "Open and Create a file"}, {"snippet": "another common mistake in C programs is to continue using memory after we've freed it", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 283.953125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "for example, an early PDP machine had a 36 bit wide addressable memory", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 152.390625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "here's why: printf() has a buffer. the C libraries have a buffer", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 119.796875, "title": "Open Errors and Printf"}, {"snippet": "we've been careful to make sure that if malloc fails, perhaps our program has used all of the heap memory", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 21.625, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "well let's have a little loop that says while(p) that says while p is non zero", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 130.484375, "title": "Char Array Searching"}, {"snippet": "to say \"here's an alias\" and I can use typedef with any kind of type", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 58.328125, "title": "Struct Typedef LinkedList"}, {"snippet": "first of all we only want to do that if we get at least one character back from getline", "videoIndex": 17, "source": "0180-getline", "startTime": 268.796875, "title": "Getline"}, {"snippet": "okay, a semicolon would help", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 277.09375, "title": "Pointers To Automatic Variables"}, {"snippet": "then just return that null pointer", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 165.09375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so I'll have a little buffer here, say, up to twenty characters", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 38.46875, "title": "Scanf Intro"}, {"snippet": "when I say data square brackets eight, I'm going to get back four times eight, thirty two bytes all together", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 23.203125, "title": "Follow The Int Pointer"}, {"snippet": "so we've got to remember that what we store is going to be our letters plus a null byte", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 320.875, "title": "Get Put Char"}, {"snippet": "so for example suppose we wanted to find the first o in this", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 297.421875, "title": "Char Array Searching"}, {"snippet": "okay, so we'll compile and run this", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 123.71875, "title": "Pointers To Automatic Variables"}, {"snippet": "get me a line and oh i need to pass in a pointer to my buffer variable", "videoIndex": 17, "source": "0180-getline", "startTime": 119.953125, "title": "Getline"}, {"snippet": "I'll have my data be my name and a score", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 25.296875, "title": "Scanf Intro"}, {"snippet": "is it any surprise that the size of an integer on this particular machine happens to be 4 bytes", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 234.40625, "title": "Not All Bytes Are 8Bits"}, {"snippet": "well there's a method called strdup so let's do that strdup and this gives me back a pointer to a new string ", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 226.515625, "title": "Creating Links Strdup"}, {"snippet": "that's it for me. time for you to play. bye!", "videoIndex": 10, "source": "0110-PointersToAutomaticVariables-v2", "startTime": 351.375, "title": "Pointers To Automatic Variables"}, {"snippet": "with my main method I will need to always know the beginning of my linked list", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 285.3125, "title": "Creating Links Strdup"}, {"snippet": "What can we do with this?", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 228.171875, "title": "Open and Create a file"}, {"snippet": "what if we wanted to make something more complicated like a linked list?", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 9.59375, "title": "Struct Typedef LinkedList"}, {"snippet": "so i've changed my link class a little bit so now each link can have a key and a value", "videoIndex": 14, "source": "0150-CreatingLinksStrdup", "startTime": 5.265625, "title": "Creating Links Strdup"}, {"snippet": "let's have a look inside some directories that we've got on our little system", "videoIndex": 7, "source": "0080-ProgramArguments", "startTime": 2.75, "title": "Program Arguments"}, {"snippet": "so how do I do that? I use ampersand to say \"give me the address\" of this", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 168.90625, "title": "Struct Typedef LinkedList"}, {"snippet": "guess what i can call putchar and we'll see that running ", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 62.1875, "title": "Get Put Char"}, {"snippet": "and that we'll find inside the manual", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 84.375, "title": "Open and Create a file"}, {"snippet": "then let's truncate the string", "videoIndex": 17, "source": "0180-getline", "startTime": 311.71875, "title": "Getline"}, {"snippet": "and if it is we will change the lowest bit", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 140.0625, "title": "Get Put Char"}, {"snippet": "and so that we know that this is being called let's write something out directly to standard output", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 105.421875, "title": "SIGINT SIGALRM"}, {"snippet": "that's enough with me playing with integer pointers", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 241.703125, "title": "Follow The Int Pointer"}, {"snippet": "so what do we mean by byte?", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 107.59375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "in other words, an integer will be at least 16 bits", "videoIndex": 4, "source": "0050-NotAllBytesAre8Bits", "startTime": 96.609375, "title": "Not All Bytes Are 8Bits"}, {"snippet": "if you free it again it can confuse the book keeping, the pointers that the heap is using itself", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 269.953125, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "here is how we are going to do it", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 11.078125, "title": "Fork Waitpid Forkbomb"}, {"snippet": "first of all there's a variable called environ", "videoIndex": 8, "source": "0090-Environment", "startTime": 50.265625, "title": "Environment"}, {"snippet": "if we want to change a bit pattern into a sequence of characters because we want to read, say, one-seven for the value seventeen", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 22.1875, "title": "Open Errors and Printf"}, {"snippet": "so let's put a little buffer on the stack here", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 261.203125, "title": "Get Put Char"}, {"snippet": "so if our program works this should find five characters", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 124.40625, "title": "Character Pointers"}, {"snippet": "and then i will sleep two seconds", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 414.71875, "title": "Fork Waitpid Forkbomb"}, {"snippet": "i have got the original process", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 76.375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so good programs will have one free for every malloc ", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 258.078125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so my secret pointer is pointing to nothing", "videoIndex": 8, "source": "0090-Environment", "startTime": 284.59375, "title": "Environment"}, {"snippet": "meaning is count a non-zero value", "videoIndex": 1, "source": "0020-HelloStdErr-24fps600kbs", "startTime": 35.890625, "title": "Hello Std Err"}, {"snippet": "in other words the user's home directory", "videoIndex": 18, "source": "0190-SIGINT-SIGALRM", "startTime": 21.921875, "title": "SIGINT SIGALRM"}, {"snippet": "we could also run through the string to actually find the 0 byte ourselves", "videoIndex": 6, "source": "0070-CharacterPointers", "startTime": 63.796875, "title": "Character Pointers"}, {"snippet": "there's one called stdin already", "videoIndex": 16, "source": "0170-scanf-intro", "startTime": 302.203125, "title": "Scanf Intro"}, {"snippet": "essentially if my buffer is not large enough", "videoIndex": 17, "source": "0180-getline", "startTime": 152.84375, "title": "Getline"}, {"snippet": "But no one else in my linux system will be allowed to read it and write it.", "videoIndex": 2, "source": "0030-OpenCreateAFile-650kb", "startTime": 217.296875, "title": "Open and Create a file"}, {"snippet": "we shouldn't consider that memory to be valid anymore", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 292.359375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and that I know from looking at the man pages", "videoIndex": 3, "source": "0040-OpenErrorsPrintf-600kbs", "startTime": 94.40625, "title": "Open Errors and Printf"}, {"snippet": "say with two hundred and fifty because when I go to return from this function", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 24.984375, "title": "Time For Mallocing Heap Memory"}, {"snippet": "so i'll do ./program and it reads every byte and prints it out as a character", "videoIndex": 15, "source": "0160-getputchar-gets-puts-v2", "startTime": 116.078125, "title": "Get Put Char"}, {"snippet": "this will give us back a pointer to the time", "videoIndex": 12, "source": "0130-HeapGotchas-DanglingPointersAndDoubleFree", "startTime": 120.34375, "title": "HeapGotchas -Dangling Pointers And Double Free"}, {"snippet": "and i can keep moving along then to print out different environmental variables", "videoIndex": 8, "source": "0090-Environment", "startTime": 98.140625, "title": "Environment"}, {"snippet": "otherwise let's put some things inside this and I could turn the current time and store it inside that array", "videoIndex": 11, "source": "0120-TimeForMallocingHeapMemory", "startTime": 172.078125, "title": "Time For Mallocing Heap Memory"}, {"snippet": "great so I've got a function that can walk through", "videoIndex": 9, "source": "0100-CharArraySearching", "startTime": 288.171875, "title": "Char Array Searching"}, {"snippet": "the parent is able to continue and is able to print I'm the grouchy parent", "videoIndex": 19, "source": "0200-forkwaitpid-forkbomb", "startTime": 311.34375, "title": "Fork Waitpid Forkbomb"}, {"snippet": "so I can now store that inside a variable", "videoIndex": 13, "source": "0140-StructTypedefLinkedList", "startTime": 221.921875, "title": "Struct Typedef LinkedList"}, {"snippet": "so now I've stored the value a hundred that integer pattern into the first four bytes", "videoIndex": 5, "source": "0060-FollowTheIntPointer", "startTime": 157.828125, "title": "Follow The Int Pointer"}]